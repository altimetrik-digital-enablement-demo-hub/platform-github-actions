name: Lint Java Project
description: 'Lint a Java project using Spring Java Format (default) or Checkstyle and optionally upload the results as an artifact'

inputs:
  lint-command:
    description: 'Lint command (e.g., mvn checkstyle:check) - overrides linter-type if specified'
    required: false
    default: ''
  linter-type:
    description: 'Type of linter to use (spring or checkstyle)'
    required: false
    default: 'spring'
  run-formatting:
    description: 'Whether to run formatting before linting'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for the lint command'
    required: false
    default: '.'
  java-version:
    description: 'Java version to use'
    required: false
    default: '17'
  continue-on-error:
    description: 'Continue on error for linting'
    required: false
    default: 'true'
  create-artifact:
    description: 'Whether to create and upload lint artifacts'
    required: false
    default: 'false'

runs: 
  using: composite
  steps:
    # This step runs the lint command
    - name: Lint Project
      run: ${{ inputs.lint-command }}
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      shell: bash

    # Format Spring Java Code
    - name: Format Spring Java Code
      if: inputs.lint-command == '' && inputs.linter-type == 'spring' && inputs.run-formatting == 'true'
      run: mvn -B spring-javaformat:apply
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      shell: bash

    # Run Spring Java Format validation
    - name: Run Spring Java Format
      if: inputs.lint-command == '' && inputs.linter-type == 'spring'
      run: mvn -B spring-javaformat:validate
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      shell: bash

    # Format with Checkstyle
    - name: Format with Checkstyle
      if: inputs.lint-command == '' && inputs.linter-type == 'checkstyle' && inputs.run-formatting == 'true'
      run: mvn -B checkstyle:format
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      shell: bash

    # Run Checkstyle validation
    - name: Run Checkstyle
      if: inputs.lint-command == '' && inputs.linter-type == 'checkstyle'
      run: mvn -B checkstyle:check
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true
      shell: bash

    # Generate summary based on linter type or custom command
    - name: Generate Lint Summary
      run: |
        if [[ "${{ inputs.lint-command }}" != "" ]]; then
          echo "## 🔧 Custom Lint Report" > lint-summary.md
          echo "- ✅ Custom lint command executed: ${{ inputs.lint-command }}" >> lint-summary.md
          echo "- 📝 Linting completed" >> lint-summary.md
        elif [[ "${{ inputs.linter-type }}" == "spring" ]]; then
          echo "## 🌸 Spring Java Format Report" > lint-summary.md
          echo "- ✅ Spring Java Format validation completed" >> lint-summary.md
          echo "- 📝 Code formatting applied (if enabled)" >> lint-summary.md
          echo "- 🎯 Code style compliance verified" >> lint-summary.md
        else
          if [[ ! -f target/checkstyle-result.xml ]]; then
            echo "## 🧹 Checkstyle Report" > lint-summary.md
            echo "- ⚠️ No report file found. Was Checkstyle run correctly?" >> lint-summary.md
          else
            ERRORS=$(grep -c '<error' target/checkstyle-result.xml || echo "0")
            WARNINGS=$(grep -c '<warning' target/checkstyle-result.xml || echo "0")

            echo "## 🧹 Checkstyle Report" > lint-summary.md
            echo "- ❌ Errors: $ERRORS" >> lint-summary.md
            echo "- ⚠️ Warnings: $WARNINGS" >> lint-summary.md
            
            if [[ $ERRORS -eq 0 ]]; then
              echo "- ✅ Code style compliance verified" >> lint-summary.md
            else
              echo "- ❌ Code style violations found" >> lint-summary.md
            fi
          fi
        fi
        
        if [[ "${{ inputs.create-artifact }}" == "true" ]]; then
          echo "- 📦 Lint artifacts uploaded" >> lint-summary.md
        else
          echo "- 💾 Lint artifacts not uploaded (storage optimization)" >> lint-summary.md
        fi
        
        # Write to GITHUB_STEP_SUMMARY
        cat lint-summary.md >> $GITHUB_STEP_SUMMARY
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # Upload the summary file as an artifact (only if create-artifact is true)
    - name: Upload Lint Summary
      if: inputs.create-artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.lint-command != '' && 'custom-lint-summary' || format('%s-lint-summary', inputs.linter-type) }}
        path: lint-summary.md 