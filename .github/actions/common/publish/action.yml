name: Deploy Application
description: Deploys application to Kubernetes, AWS App Runner, and/or Azure Container Apps

inputs:
  app-name:
    description: Name of the application
    required: true
  environment:
    description: Target environment (dev, staging, prod)
    required: true
  image-tag:
    description: Docker image tag to deploy
    required: true
  deploy-k8s:
    description: Whether to deploy to Kubernetes
    required: false
    default: 'true'
  deploy-aws:
    description: Whether to deploy to AWS App Runner
    required: false
    default: 'false'
  deploy-azure:
    description: Whether to deploy to Azure Container Apps
    required: false
    default: 'false'
  k8s-namespace:
    description: Kubernetes namespace
    required: false
    default: 'default'
  k8s-replicas:
    description: Number of Kubernetes replicas
    required: false
    default: '2'
  azure-resource-group:
    description: Azure Resource Group name
    required: false
    default: 'rg-container-apps'
  azure-location:
    description: Azure location/region
    required: false
    default: 'eastus'

runs:
  using: 'composite'
  steps:
    - name: Debug inputs
      shell: bash
      run: |
        echo "app-name: ${{ inputs.app-name }}"
        echo "environment: ${{ inputs.environment }}"
        echo "image-tag: ${{ inputs.image-tag }}"
        echo "deploy-k8s: ${{ inputs.deploy-k8s }}"
        echo "deploy-aws: ${{ inputs.deploy-aws }}"
        echo "deploy-azure: ${{ inputs.deploy-azure }}"

    # Kubernetes Deployment
    - name: Deploy to Kubernetes
      if: inputs.deploy-k8s == 'true'
      shell: bash
      run: |
        echo "Deploying ${{ inputs.app-name }}:${{ inputs.image-tag }} to Kubernetes..."
        
        # Generate Kubernetes manifests
        cat <<EOF > k8s-deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ inputs.app-name }}
          namespace: ${{ inputs.k8s-namespace }}
          labels:
            app: ${{ inputs.app-name }}
            environment: ${{ inputs.environment }}
        spec:
          replicas: ${{ inputs.k8s-replicas }}
          selector:
            matchLabels:
              app: ${{ inputs.app-name }}
          template:
            metadata:
              labels:
                app: ${{ inputs.app-name }}
                environment: ${{ inputs.environment }}
            spec:
              containers:
              - name: ${{ inputs.app-name }}
                image: ${{ inputs.app-name }}:${{ inputs.image-tag }}
                ports:
                - containerPort: 8080
                env:
                - name: ENVIRONMENT
                  value: ${{ inputs.environment }}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ inputs.app-name }}-service
          namespace: ${{ inputs.k8s-namespace }}
        spec:
          selector:
            app: ${{ inputs.app-name }}
          ports:
          - port: 80
            targetPort: 8080
          type: LoadBalancer
        EOF
        
        echo "Generated Kubernetes manifests:"
        cat k8s-deployment.yaml
        
        # Apply manifests (requires kubectl and cluster access)
        # kubectl apply -f k8s-deployment.yaml
        echo "Note: kubectl apply commented out - requires cluster credentials"

    - name: Upload Kubernetes manifests
      if: inputs.deploy-k8s == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: k8s-manifests-${{ inputs.environment }}
        path: k8s-deployment.yaml

    # AWS App Runner Deployment  
    - name: Deploy to AWS App Runner
      if: inputs.deploy-aws == 'true'
      shell: bash
      run: |
        echo "Deploying ${{ inputs.app-name }}:${{ inputs.image-tag }} to AWS App Runner..."
        
        # Generate App Runner configuration
        cat <<EOF > apprunner-config.json
        {
          "ServiceName": "${{ inputs.app-name }}-${{ inputs.environment }}",
          "SourceConfiguration": {
            "ImageRepository": {
              "ImageIdentifier": "${{ inputs.app-name }}:${{ inputs.image-tag }}",
              "ImageConfiguration": {
                "Port": "8080",
                "RuntimeEnvironmentVariables": {
                  "ENVIRONMENT": "${{ inputs.environment }}"
                }
              },
              "ImageRepositoryType": "ECR"
            },
            "AutoDeploymentsEnabled": true
          },
          "InstanceConfiguration": {
            "Cpu": "0.25 vCPU",
            "Memory": "0.5 GB"
          }
        }
        EOF
        
        echo "Generated App Runner configuration:"
        cat apprunner-config.json
        
        # Deploy to App Runner (requires AWS CLI and credentials)
        # aws apprunner create-service --cli-input-json file://apprunner-config.json
        echo "Note: AWS App Runner deployment commented out - requires AWS credentials"

    - name: Upload App Runner config
      if: inputs.deploy-aws == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: apprunner-config-${{ inputs.environment }}
        path: apprunner-config.json

    # Azure Container Apps Deployment
    - name: Deploy to Azure Container Apps
      if: inputs.deploy-azure == 'true'
      shell: bash
      run: |
        echo "Deploying ${{ inputs.app-name }}:${{ inputs.image-tag }} to Azure Container Apps..."
        
        # Generate Azure Container App configuration
        cat <<EOF > azure-containerapp.yaml
        apiVersion: 2023-05-01
        type: Microsoft.App/containerApps
        name: ${{ inputs.app-name }}-${{ inputs.environment }}
        location: ${{ inputs.azure-location }}
        properties:
          managedEnvironmentId: /subscriptions/{subscription-id}/resourceGroups/${{ inputs.azure-resource-group }}/providers/Microsoft.App/managedEnvironments/${{ inputs.app-name }}-env
          configuration:
            ingress:
              external: true
              targetPort: 8080
              allowInsecure: false
            secrets: []
          template:
            containers:
            - name: ${{ inputs.app-name }}
              image: ${{ inputs.app-name }}:${{ inputs.image-tag }}
              env:
              - name: ENVIRONMENT
                value: ${{ inputs.environment }}
              resources:
                cpu: 0.25
                memory: 0.5Gi
            scale:
              minReplicas: 0
              maxReplicas: 3
        EOF
        
        # Generate Azure CLI deployment script
        cat <<EOF > deploy-azure.sh
        #!/bin/bash
        
        # Create resource group if it doesn't exist
        az group create --name ${{ inputs.azure-resource-group }} --location ${{ inputs.azure-location }}
        
        # Create Container Apps environment if it doesn't exist
        az containerapp env create \\
          --name ${{ inputs.app-name }}-env \\
          --resource-group ${{ inputs.azure-resource-group }} \\
          --location ${{ inputs.azure-location }}
        
        # Deploy Container App
        az containerapp create \\
          --name ${{ inputs.app-name }}-${{ inputs.environment }} \\
          --resource-group ${{ inputs.azure-resource-group }} \\
          --environment ${{ inputs.app-name }}-env \\
          --image ${{ inputs.app-name }}:${{ inputs.image-tag }} \\
          --target-port 8080 \\
          --ingress external \\
          --env-vars ENVIRONMENT=${{ inputs.environment }} \\
          --cpu 0.25 --memory 0.5Gi \\
          --min-replicas 0 --max-replicas 3
        EOF
        
        chmod +x deploy-azure.sh
        
        echo "Generated Azure Container App configuration:"
        cat azure-containerapp.yaml
        echo ""
        echo "Generated Azure CLI deployment script:"
        cat deploy-azure.sh
        
        # Deploy to Azure (requires Azure CLI and authentication)
        # ./deploy-azure.sh
        echo "Note: Azure deployment commented out - requires Azure CLI authentication"

    - name: Upload Azure Container App configs
      if: inputs.deploy-azure == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: azure-containerapp-config-${{ inputs.environment }}
        path: |
          azure-containerapp.yaml
          deploy-azure.sh

    - name: Deployment Summary
      shell: bash
      run: |
        echo "==================================="
        echo "        DEPLOYMENT SUMMARY"
        echo "==================================="
        echo "Application: ${{ inputs.app-name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Image Tag: ${{ inputs.image-tag }}"
        echo ""
        if [[ "${{ inputs.deploy-k8s }}" == "true" ]]; then
          echo "âœ… Kubernetes manifests generated"
          echo "   â””â”€â”€ Artifact: k8s-manifests-${{ inputs.environment }}"
        fi
        if [[ "${{ inputs.deploy-aws }}" == "true" ]]; then
          echo "âœ… AWS App Runner configuration generated"
          echo "   â””â”€â”€ Artifact: apprunner-config-${{ inputs.environment }}"
        fi
        if [[ "${{ inputs.deploy-azure }}" == "true" ]]; then
          echo "âœ… Azure Container Apps configuration generated"
          echo "   â””â”€â”€ Artifact: azure-containerapp-config-${{ inputs.environment }}"
        fi
        echo ""
        echo "ðŸ“‹ Check workflow artifacts for deployment configurations"
        echo "ðŸš€ Uncomment deployment commands when ready to deploy"
