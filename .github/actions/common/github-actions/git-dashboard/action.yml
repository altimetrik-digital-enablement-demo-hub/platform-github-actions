name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'auto'

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"
  
  fail-on-keywords:
    description: "Comma-separated list of keywords. If any is found in report, step fails"
    required: false
    default: ""
  
  fail-on-thresholds:
    description: "Newline-separated thresholds. Format: Metric OP Value (e.g., Code Quality < 6)"
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        set +e
        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs['max-lines'] }}"
        FAIL_KEYWORDS="${{ inputs['fail-on-keywords'] }}"
        FAIL_THRESHOLDS="${{ inputs['fail-on-thresholds'] }}"

        echo "🔍 Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "📄 Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "📝 Title: $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "❌ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            sarif) FORMAT="sarif" ;;
            xml) FORMAT="xml" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "🧠 Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧩 $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        FAIL_FOUND=0
        declare -A METRICS
        declare -A KEYWORD_COUNTS
        KEYWORDS=("ERROR" "FAILED" "FAIL" "Traceback" "Exception")

        case "$FORMAT" in
          sarif)
            echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
            for lvl in error warning note; do
              CNT=$(jq "[.runs[].results[] | select(.level == \"$lvl\")] | length" "$REPORT" 2>/dev/null || echo 0)
              echo "| $lvl | $CNT |" >> "$GITHUB_STEP_SUMMARY"
              [[ "$lvl" == "error" ]] && METRICS["Errors"]="$CNT"
            done
            ;;
          json)
            echo "| Key | Value |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            jq -r 'to_entries[] | select(.value|type != "object") | "| \(.key) | \(.value) |"' "$REPORT" \
              | head -n "$MAX_LINES" >> "$GITHUB_STEP_SUMMARY"
            ;;
          xml)
            echo "| Tag | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            for tag in testsuite testcase error failure skipped; do
              CNT=$(grep -c "<$tag" "$REPORT" || echo 0)
              echo "| <$tag> | $CNT |" >> "$GITHUB_STEP_SUMMARY"
              METRICS["$tag"]="$CNT"
            done
            ;;
          text|*)
            SHOW_KEYWORDS=0
            for w in "${KEYWORDS[@]}"; do
              CNT=$(grep -ic "$w" "$REPORT" || echo 0)
              KEYWORD_COUNTS["$w"]="$CNT"
              (( CNT > 0 )) && SHOW_KEYWORDS=1 && FAIL_FOUND=1
            done

            if [[ "$SHOW_KEYWORDS" -eq 1 ]]; then
              echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
              echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"
              for w in "${KEYWORDS[@]}"; do
                echo "| $w | ${KEYWORD_COUNTS[$w]} |" >> "$GITHUB_STEP_SUMMARY"
              done
              echo "" >> "$GITHUB_STEP_SUMMARY"
            fi

            echo "### 🔎 Pattern Matches" >> "$GITHUB_STEP_SUMMARY"
            echo "| Pattern | Match |" >> "$GITHUB_STEP_SUMMARY"
            echo "|---------|--------|" >> "$GITHUB_STEP_SUMMARY"

            # Ran tests
            M=$(grep -Eo "Ran [0-9]+ test(s)? in [0-9\.]+s" "$REPORT" | head -n 1)
            if [[ -n "$M" ]]; then
              echo "| Ran Tests | $M |" >> "$GITHUB_STEP_SUMMARY"
              METRICS["Tests Ran"]=$(echo "$M" | grep -Eo "[0-9]+")
            fi

            # Code Quality
            M=$(grep -Eo "rated at [0-9\.]+/10" "$REPORT" | head -n 1)
            if [[ -n "$M" ]]; then
              R=$(echo "$M" | grep -Eo "[0-9\.]+(?=/10)")
              echo "| Code Quality | $M |" >> "$GITHUB_STEP_SUMMARY"
              METRICS["Code Quality"]="$R"
            fi

            # Vulnerabilities
            V=$(grep -Eo "Total: [0-9]+ \(HIGH: [0-9]+, CRITICAL: [0-9]+\)" "$REPORT" | head -n 2)
            if [[ -n "$V" ]]; then
              while IFS= read -r line; do
                echo "| Vulnerabilities | $line |" >> "$GITHUB_STEP_SUMMARY"
                H=$(echo "$line" | grep -Eo "HIGH: [0-9]+" | grep -Eo "[0-9]+")
                C=$(echo "$line" | grep -Eo "CRITICAL: [0-9]+" | grep -Eo "[0-9]+")
                [[ -n "$H" ]] && METRICS["HIGH"]="$H"
                [[ -n "$C" ]] && METRICS["CRITICAL"]="$C"
              done <<< "$V"
            fi
            ;;
        esac

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        # Fail on keywords
        if [[ -n "$FAIL_KEYWORDS" ]]; then
          IFS=',' read -ra FKW <<< "$FAIL_KEYWORDS"
          for w in "${FKW[@]}"; do
            grep -iq "$w" "$REPORT" && FAIL_FOUND=1 && \
              echo "❌ Keyword '$w' found, failing step" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        # Threshold checks
        if [[ -n "$FAIL_THRESHOLDS" ]]; then
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🚨 Threshold Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "| Metric | Operator | Value | Actual | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|----------|-------|--------|--------|"

          IFS=',' read -ra TARR <<< "$FAIL_THRESHOLDS"
          for rule in "${TARR[@]}"; do
            # Trim leading/trailing whitespace
            rule=$(echo "$rule" | xargs)

            # Match pattern like: "Code Quality < 6.0"
            if [[ "$rule" =~ ^([^<>=!]+)[[:space:]]*([<>=!]+)[[:space:]]*([0-9.]+)$ ]]; then
              MET="${BASH_REMATCH[1]}"
              OP="${BASH_REMATCH[2]}"
              TH="${BASH_REMATCH[3]}"
              ACT="${METRICS[$MET]:-N/A}"
              STAT="✅"
              FAIL_THIS=0

              if [[ "$ACT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                python3 -c "
        import sys
        if float(\"$ACT\") $OP float(\"$TH\"):
            sys.exit(0)
        else:
            sys.exit(1)
        " || FAIL_THIS=1
              else
                FAIL_THIS=1
              fi

              [[ $FAIL_THIS -eq 1 ]] && STAT="❌" && FAIL_FOUND=1
              echo "| $MET | $OP | $TH | $ACT | $STAT |" >> "$GITHUB_STEP_SUMMARY"
            else
              FAIL_FOUND=1
              echo "| Invalid threshold: $rule | - | - | - | ❌ |" >> "$GITHUB_STEP_SUMMARY"
            fi
          done
        fi

        exit $FAIL_FOUND