name: "Summarize Report"
description: "Summarize a report and perform threshold/pattern checks"

inputs:
  tool:
    description: "Tool name (e.g. UnitTest, Trivy)"
    required: true

  report:
    description: "Path to the report file"
    required: true

  format:
    description: "Report format: auto, text, json, sarif, xml"
    required: false
    default: "auto"

  title:
    description: "Optional section title"
    required: false
    default: "Summary"

  max-lines:
    description: "Max lines to include from raw report"
    required: false
    default: "100"

  fail-on-keywords:
    description: "Comma-separated keywords that cause failure if found"
    required: false
    default: ""

  thresholds:
    description: "Thresholds in format 'Metric|Operator|Value' (comma-separated)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        set +e

        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs.max-lines }}"
        FAIL_KEYWORDS="${{ inputs.fail-on-keywords }}"
        THRESHOLDS="${{ inputs.thresholds }}"

        echo "üîç Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "üìÑ Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "üìù Title: $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "‚ùå Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            sarif) FORMAT="sarif" ;;
            xml) FORMAT="xml" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "üß† Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "## üß© $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        FAIL_FOUND=0
        CODE_QUALITY="N/A"
        declare -A METRICS

        if [[ "$FORMAT" == "text" || "$FORMAT" == *"text"* ]]; then
          # Keyword detection
          KEYWORDS=("ERROR" "FAILED" "FAIL" "Traceback" "Exception")
          KEYWORD_TABLE=""
          for word in "${KEYWORDS[@]}"; do
            COUNT=$(grep -ic "$word" "$REPORT" || true)
            if [[ "$COUNT" -gt 0 ]]; then
              KEYWORD_TABLE+="| $word | $COUNT |"
              FAIL_FOUND=1
            fi
          done

          if [[ -n "$KEYWORD_TABLE" ]]; then
            echo "### ‚ùó Keyword Summary" >> "$GITHUB_STEP_SUMMARY"
            echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"
            echo "$KEYWORD_TABLE" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Pattern matches
          echo "### üîé Pattern Matches" >> "$GITHUB_STEP_SUMMARY"
          echo "| Pattern | Match |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---------|--------|" >> "$GITHUB_STEP_SUMMARY"

          MATCH=$(grep -Eo "rated at [0-9\.]+/10" "$REPORT" | head -n 1)
          if [[ -n "$MATCH" ]]; then
            CODE_QUALITY=$(echo "$MATCH" | grep -Eo "[0-9\.]+")
            METRICS["Code Quality"]="$CODE_QUALITY"
            echo "| Code Quality | $MATCH |" >> "$GITHUB_STEP_SUMMARY"
          fi

          VULNS=$(grep -Eo "Total: [0-9]+ \(HIGH: [0-9]+, CRITICAL: [0-9]+\)" "$REPORT" | head -n 2)
          while IFS= read -r line; do
            echo "| Vulnerabilities | $line |" >> "$GITHUB_STEP_SUMMARY"
          done <<< "$VULNS"
        fi

        if [[ "$FORMAT" == "sarif" ]]; then
          echo "### üêû SARIF Severity Counts" >> "$GITHUB_STEP_SUMMARY"
          echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
          for lvl in error warning note; do
            CNT=$(jq "[.runs[].results[] | select(.level == \"$lvl\")] | length" "$REPORT" 2>/dev/null || echo 0)
            echo "| $lvl | $CNT |" >> "$GITHUB_STEP_SUMMARY"
            [[ "$lvl" == "error" ]] && METRICS["Errors"]="$CNT"
          done
        fi

        if [[ "$FORMAT" == "json" ]]; then
          echo "### üìä JSON Report Data" >> "$GITHUB_STEP_SUMMARY"
          echo "| Key | Value |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
          jq -r 'to_entries[] | select(.value|type != "object") | "| \(.key) | \(.value) |"' "$REPORT" | head -n "$MAX_LINES" >> "$GITHUB_STEP_SUMMARY"
        fi

        if [[ "$FORMAT" == "xml" ]]; then
          echo "### üì¶ XML Tag Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "| Tag | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
          for tag in testsuite testcase error failure skipped; do
            CNT=$(grep -c "<$tag" "$REPORT" || echo 0)
            echo "| <$tag> | $CNT |" >> "$GITHUB_STEP_SUMMARY"
            METRICS["$tag"]="$CNT"
          done
        fi

        # Show Raw Report (Optional)
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>üìÑ Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        # Thresholds
        if [[ -n "$THRESHOLDS" ]]; then
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### üö® Threshold Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "| Metric | Operator | Value | Actual | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|----------|-------|--------|--------|" >> "$GITHUB_STEP_SUMMARY"

          IFS=',' read -ra RULES <<< "$THRESHOLDS"
          for rule in "${RULES[@]}"; do
            IFS='|' read -r metric op value <<< "$(echo "$rule" | xargs)"
            actual="${METRICS[$metric]:-N/A}"
            status="‚úÖ"

            if [[ "$actual" =~ ^[0-9\.]+$ ]]; then
              result=$(awk "BEGIN {print ($actual $op $value) ? 1 : 0}")
              if [[ "$result" -eq 0 ]]; then
                status="‚ùå"
                FAIL_FOUND=1
              fi
            else
              status="‚ùå"
              FAIL_FOUND=1
            fi

            echo "| $metric | $op | $value | $actual | $status |" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        # Fail on specific keywords
        if [[ -n "$FAIL_KEYWORDS" ]]; then
          IFS=',' read -ra KW_ARR <<< "$FAIL_KEYWORDS"
          for k in "${KW_ARR[@]}"; do
            if grep -iq -- "$k" "$REPORT"; then
              echo "‚ùå Keyword '$k' found in report" >> "$GITHUB_STEP_SUMMARY"
              FAIL_FOUND=1
            fi
          done
        fi

        if [[ "$FAIL_FOUND" -eq 1 ]]; then
          echo "‚ùå One or more checks failed"
          exit 1
        fi

        exit 0
