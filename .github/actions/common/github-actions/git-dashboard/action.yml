name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'text'

  keywords:
    description: "Comma-separated list of keywords to count (e.g., CRITICAL,HIGH,ERROR)"
    required: false
    default: "CRITICAL,HIGH"

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"

  filter-regex:
    description: "Optional regex to filter lines before including in summary"
    required: false
    default: ""

  deduplicate:
    description: "If true, remove duplicate lines from filtered output"
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs['max-lines'] }}"

        echo "🔍 Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "📄 Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "📝 Title: $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "🔎 Format (input): $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "❌ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            sarif) FORMAT="sarif" ;;
            xml) FORMAT="xml" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "🧠 Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧩 $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        case "$FORMAT" in
          sarif)
            echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
            for level in error warning note; do
              COUNT=$(jq "[.runs[].results[] | select(.level == \"$level\")] | length" "$REPORT" 2>/dev/null || echo 0)
              echo "| $level | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
            done
            ;;
          json)
            echo "| Key | Value |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            jq -r 'to_entries[] | select(.value|type != "object") | "| \(.key) | \(.value) |"' "$REPORT" 2>/dev/null | head -n "$MAX_LINES" >> "$GITHUB_STEP_SUMMARY"
            ;;
          xml)
            echo "| Tag | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            for tag in testsuite testcase error failure skipped; do
              COUNT=$(grep -c "<$tag" "$REPORT" || true)
              echo "| <$tag> | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
            done
            ;;
          text|*)
            echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"
            for word in ERROR FAILED FAIL Traceback Exception; do
              COUNT=$(grep -ic "$word" "$REPORT" || true)
              echo "| $word | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
            done
            ;;
        esac

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        echo "✅ Done summarizing report"
        exit 0