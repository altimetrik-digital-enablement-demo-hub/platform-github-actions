name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'text'

  keywords:
    description: "Comma-separated list of keywords to count (e.g., CRITICAL,HIGH,ERROR)"
    required: false
    default: "CRITICAL,HIGH"

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"

  filter-regex:
    description: "Optional regex to filter lines before including in summary"
    required: false
    default: ""

  deduplicate:
    description: "If true, remove duplicate lines from filtered output"
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        TOOL="${{ inputs.tool }}"
        TITLE="${{ inputs.title }}"
        REPORT="${{ inputs.working-directory }}/${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        KEYWORDS_STRING="${{ inputs.keywords }}"
        MAX_LINES="${{ inputs.max-lines }}"
        FILTER_REGEX="${{ inputs.filter-regex }}"
        DEDUPLICATE="${{ inputs.deduplicate }}"

        echo "📄 Processing report: $REPORT"

        if [[ ! -f "$REPORT" ]]; then
          echo "⚠️ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        echo "## 🧩 ${TOOL} - ${TITLE}" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        case "$FORMAT" in
          text)
            echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"

            IFS=',' read -ra KEYWORDS <<< "$KEYWORDS_STRING"
            for word in "${KEYWORDS[@]}"; do
              COUNT=$(grep -c "$word" "$REPORT" || true)
              echo "| $word | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
            done
            ;;
          sarif)
            echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
            for level in error warning note; do
              COUNT=$(jq "[.runs[].results[] | select(.level == \"$level\")] | length" "$REPORT")
              echo "| $level | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
            done
            ;;
            eslint-json)
              echo "| Rule ID | Message | Line |" >> "$GITHUB_STEP_SUMMARY"
              echo "|---------|---------|------|" >> "$GITHUB_STEP_SUMMARY"
              jq -r '.[] | .messages[] | "| \(.ruleId // "N/A") | \(.message | gsub("\n"; " ")) | \(.line // 0) |"' "$REPORT" | head -n "$MAX_LINES" >> "$GITHUB_STEP_SUMMARY"
              ;;
          jest-json)
            echo "| Metric | Value |" >> "$GITHUB_STEP_SUMMARY"
            echo "|--------|-------|" >> "$GITHUB_STEP_SUMMARY"
            echo "| Total Tests | $(jq '.numTotalTests' "$REPORT") |" >> "$GITHUB_STEP_SUMMARY"
            echo "| Passed | $(jq '.numPassedTests' "$REPORT") |" >> "$GITHUB_STEP_SUMMARY"
            echo "| Failed | $(jq '.numFailedTests' "$REPORT") |" >> "$GITHUB_STEP_SUMMARY"
            echo "| Skipped | $(jq '.numPendingTests' "$REPORT") |" >> "$GITHUB_STEP_SUMMARY"
            ;;
          *)
            echo "❌ Unknown format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
            exit 1
            ;;
        esac

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top ${MAX_LINES} lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"

        if [[ -n "$FILTER_REGEX" ]]; then
          if [[ "$DEDUPLICATE" == "true" ]]; then
            grep -E "$FILTER_REGEX" "$REPORT" | sort | uniq | head -n "$MAX_LINES"
          else
            grep -E "$FILTER_REGEX" "$REPORT" | head -n "$MAX_LINES"
          fi
        else
          if [[ "$DEDUPLICATE" == "true" ]]; then
            sort "$REPORT" | uniq | head -n "$MAX_LINES"
          else
            head -n "$MAX_LINES" "$REPORT"
          fi
        fi >> "$GITHUB_STEP_SUMMARY"

        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"