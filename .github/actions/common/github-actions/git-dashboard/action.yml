name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'auto'

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"
  
  fail-on-keywords:
    description: "Comma-separated list of keywords. If any is found in report, step fails"
    required: false
    default: ""
  
  fail-on-thresholds:
    description: "Newline-separated thresholds. Format: Metric OP Value (e.g., Code Quality < 6)"
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        set +e
        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs.max-lines }}"
        FAIL_KEYWORDS="${{ inputs.fail-on-keywords }}"
        FAIL_THRESHOLDS="${{ inputs.fail-on-thresholds }}"

        echo "🔍 Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "📄 Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "📝 Title: $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "🔎 Format (input): $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "❌ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            sarif) FORMAT="sarif" ;;
            xml) FORMAT="xml" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "🧠 Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧩 $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        FAIL_FOUND=0
        declare -A METRICS
        declare -A KEYWORD_COUNTS
        KEYWORDS_TO_SCAN=("ERROR" "FAILED" "FAIL" "Traceback" "Exception")

        case "$FORMAT" in
          sarif)
            echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
            for level in error warning note; do
              COUNT=$(jq "[.runs[].results[] | select(.level == \"$level\")] | length" "$REPORT" 2>/dev/null || echo 0)
              echo "| $level | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
              [[ "$level" == "error" ]] && METRICS["Errors"]="$COUNT"
            done
            ;;
          json)
            echo "| Key | Value |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            jq -r 'to_entries[] | select(.value|type != "object") | "| \(.key) | \(.value) |"' "$REPORT" 2>/dev/null | head -n "$MAX_LINES" >> "$GITHUB_STEP_SUMMARY"
            ;;
          xml)
            echo "| Tag | Count |" >> "$GITHUB_STEP_SUMMARY"
            echo "|-----|-------|" >> "$GITHUB_STEP_SUMMARY"
            for tag in testsuite testcase error failure skipped; do
              COUNT=$(grep -c "<$tag" "$REPORT" || true)
              echo "| <$tag> | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
              METRICS["$tag"]="$COUNT"
            done
            ;;
          text|*)
            KEYWORDS_FOUND=0
            for word in "${KEYWORDS_TO_SCAN[@]}"; do
              COUNT=$(grep -ic "$word" "$REPORT" || true)
              KEYWORD_COUNTS["$word"]="$COUNT"
              [[ "$COUNT" -gt 0 ]] && KEYWORDS_FOUND=1
            done

            if [[ "$KEYWORDS_FOUND" -eq 1 ]]; then
              echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
              echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"
              for word in "${KEYWORDS_TO_SCAN[@]}"; do
                echo "| $word | ${KEYWORD_COUNTS[$word]} |" >> "$GITHUB_STEP_SUMMARY"
              done
              echo "" >> "$GITHUB_STEP_SUMMARY"
            fi

            echo "### 🔎 Pattern Matches" >> "$GITHUB_STEP_SUMMARY"
            echo "| Pattern | Match |" >> "$GITHUB_STEP_SUMMARY"
            echo "|---------|--------|" >> "$GITHUB_STEP_SUMMARY"

            MATCH=$(grep -Eo "Ran [0-9]+ test(s)? in [0-9\.]+s" "$REPORT" | head -n 1)
            [[ -n "$MATCH" ]] && echo "| Ran Tests | $MATCH |" >> "$GITHUB_STEP_SUMMARY"
            TESTS=$(echo "$MATCH" | grep -Eo "[0-9]+" | head -n 1)
            [[ -n "$TESTS" ]] && METRICS["Tests Ran"]="$TESTS"

            MATCH=$(grep -Eo "rated at [0-9\.]+/10" "$REPORT" | head -n 1)
            if [[ -n "$MATCH" ]]; then
              RATING=$(echo "$MATCH" | grep -Eo "[0-9\.]+(?=/10)")
              echo "| Code Quality | $MATCH |" >> "$GITHUB_STEP_SUMMARY"
              METRICS["Code Quality"]="$RATING"
            fi

            MATCHES=$(grep -Eo "Total: [0-9]+ \(HIGH: [0-9]+, CRITICAL: [0-9]+\)" "$REPORT" | head -n 2)
            while IFS= read -r line; do
              echo "| Vulnerabilities | $line |" >> "$GITHUB_STEP_SUMMARY"
              HIGH=$(echo "$line" | grep -Eo "HIGH: [0-9]+" | grep -Eo "[0-9]+")
              CRITICAL=$(echo "$line" | grep -Eo "CRITICAL: [0-9]+" | grep -Eo "[0-9]+")
              [[ -n "$HIGH" ]] && METRICS["HIGH"]="$HIGH"
              [[ -n "$CRITICAL" ]] && METRICS["CRITICAL"]="$CRITICAL"
            done <<< "$MATCHES"
            ;;
        esac

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        # Fail if certain keywords are found
        if [[ -n "$FAIL_KEYWORDS" ]]; then
          IFS=',' read -ra KEYWORDS <<< "$FAIL_KEYWORDS"
          for word in "${KEYWORDS[@]}"; do
            MATCH=$(grep -i "$word" "$REPORT" | head -n 1)
            if [[ -n "$MATCH" ]]; then
              echo "❌ Keyword '$word' found in report, failing step"
              FAIL_FOUND=1
            fi
          done
        fi

        # Fail if any thresholds are violated
        if [[ -n "$FAIL_THRESHOLDS" ]]; then
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🚨 Threshold Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "| Metric | Operator | Value | Actual | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|----------|-------|--------|--------|"

          IFS=$'\n'
          for line in $FAIL_THRESHOLDS; do
            [[ "$line" =~ ^[[:space:]]*$ ]] && continue
            METRIC=$(echo "$line" | awk '{print $1 " " $2}')
            OP=$(echo "$line" | awk '{print $3}')
            VALUE=$(echo "$line" | awk '{print $4}')

            ACTUAL="${METRICS[$METRIC]}"
            STATUS="✅"
            FAIL_THIS=0

            if [[ -n "$ACTUAL" ]]; then
              python3 -c "
          try:
            exit(0) if float($ACTUAL) $OP float($VALUE) else exit(1)
          except:
            exit(1)
          " || FAIL_THIS=1
            else
              STATUS="❓"
              FAIL_THIS=1
            fi

            [[ "$FAIL_THIS" == "1" ]] && STATUS="❌" && FAIL_FOUND=1
            echo "| $METRIC | $OP | $VALUE | ${ACTUAL:-N/A} | $STATUS |" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        exit $FAIL_FOUND