name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'auto'

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"
  
  fail-on-keywords:
    description: "Comma-separated list of keywords. If any is found in report, step fails"
    required: false
    default: ""
  
  threshold-checks:
    description: "Newline-separated thresholds. Format: Metric OP Value (e.g., Code Quality < 6)"
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        set +e

        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs.max-lines }}"
        FAIL_KEYWORDS="${{ inputs.fail-on-keywords }}"
        THRESHOLDS="${{ inputs.thresholds }}"

        echo "🔍 Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "📄 Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "📝 Title: $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "❌ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            sarif) FORMAT="sarif" ;;
            xml) FORMAT="xml" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "🧠 Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧩 $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        FAIL_FOUND=0
        SHOW_KEYWORD_TABLE=0

        if [[ "$FORMAT" == "text" || "$FORMAT" == *"text"* ]]; then
          KEYWORDS=("ERROR" "FAILED" "FAIL" "Traceback" "Exception")
          KEYWORD_TABLE="| Keyword | Count |
                         |---------|-------|"
          for word in "${KEYWORDS[@]}"; do
            COUNT=$(grep -ic "$word" "$REPORT" || true)
            if [[ "$COUNT" -gt 0 ]]; then
              SHOW_KEYWORD_TABLE=1
              FAIL_FOUND=1
            fi
            KEYWORD_TABLE+="
              | $word | $COUNT |"
          done

          if [[ "$SHOW_KEYWORD_TABLE" -eq 1 ]]; then
            echo "$KEYWORD_TABLE" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "### 🔎 Pattern Matches" >> "$GITHUB_STEP_SUMMARY"
          echo "| Pattern | Match |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---------|--------|" >> "$GITHUB_STEP_SUMMARY"

          MATCH=$(grep -Eo "rated at [0-9\.]+/10" "$REPORT" | head -n 1)
          if [[ -n "$MATCH" ]]; then
            ACTUAL=$(echo "$MATCH" | grep -Eo "[0-9\.]+")
            CODE_QUALITY=$ACTUAL
            echo "| Code Quality | $MATCH |" >> "$GITHUB_STEP_SUMMARY"
          else
            CODE_QUALITY="N/A"
          fi

          MATCHES=$(grep -Eo "Total: [0-9]+ \(HIGH: [0-9]+, CRITICAL: [0-9]+\)" "$REPORT" | head -n 2)
          while IFS= read -r line; do
            echo "| Vulnerabilities | $line |" >> "$GITHUB_STEP_SUMMARY"
          done <<< "$MATCHES"
        fi

        # Threshold Table
        if [[ -n "$THRESHOLDS" ]]; then
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🚨 Threshold Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "| Metric | Operator | Value | Actual | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|----------|-------|--------|--------|" >> "$GITHUB_STEP_SUMMARY"

          IFS=',' read -ra THRESHOLD_ARR <<< "$THRESHOLDS"
          for threshold in "${THRESHOLD_ARR[@]}"; do
            IFS='|' read -r metric op value <<< "$threshold"
            actual="N/A"
            status="✅"

            if [[ "$metric" == "Code Quality" ]]; then
              actual="$CODE_QUALITY"
            fi

            # Only evaluate numeric comparison if actual is a number
            if [[ "$actual" =~ ^[0-9\.]+$ ]]; then
              cmp=$(awk "BEGIN { if ($actual $op $value) print 1; else print 0 }")
              if [[ "$cmp" -eq 0 ]]; then
                status="❌"
                FAIL_FOUND=1
              fi
            else
              status="❌"
              FAIL_FOUND=1
            fi

            echo "| $metric | $op | $value | $actual | $status |" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        # Keyword Fail Check
        if [[ -n "$FAIL_KEYWORDS" ]]; then
          IFS=',' read -ra KW <<< "$FAIL_KEYWORDS"
          for word in "${KW[@]}"; do
            MATCH=$(grep -i "$word" "$REPORT" | head -n 1)
            if [[ -n "$MATCH" ]]; then
              FAIL_FOUND=1
            fi
          done
        fi

        if [[ "$FAIL_FOUND" -eq 1 ]]; then
          echo "❌ Threshold or pattern checks failed"
          exit 1
        fi

        exit 0