name: "Summarize Report"
description: "Summarize a tool's report and write to GITHUB_STEP_SUMMARY in a clean markdown format"

inputs:
  tool:
    description: "Tool name (e.g., Trivy, CodeQL, Docker)"
    required: true

  report:
    description: "Path to the report file (e.g., report.txt)"
    required: true
  
  format:
    required: false
    description: 'Report format (e.g. text, sarif, eslint-json, jest-json)'
    default: 'auto'

  title:
    description: "Optional title for the summary section"
    required: false
    default: "Scan Summary"

  max-lines:
    description: "Number of lines from the report to include"
    required: false
    default: "100"
  
  fail-on-keywords:
    description: "Comma-separated list of keywords. If any is found in report, step fails"
    required: false
    default: ""
  
  threshold-checks:
    description: "Newline-separated thresholds. Format: Metric OP Value (e.g., Code Quality < 6)"
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Summarize Report
      shell: bash
      run: |
        set +e
        TOOL="${{ inputs.tool }}"
        REPORT="${{ inputs.report }}"
        FORMAT="${{ inputs.format }}"
        TITLE="${{ inputs.title }}"
        MAX_LINES="${{ inputs['max-lines'] }}"
        FAIL_KEYWORDS="${{ inputs['fail-on-keywords'] }}"
        THRESHOLD_CHECKS="${{ inputs['threshold-checks'] }}"

        echo "🔍 Tool: $TOOL" >> "$GITHUB_STEP_SUMMARY"
        echo "📄 Report: $REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [[ ! -f "$REPORT" ]]; then
          echo "❌ Report file not found: $REPORT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        if [[ "$FORMAT" == "auto" ]]; then
          EXT="${REPORT##*.}"
          case "$EXT" in
            json) FORMAT="json" ;;
            xml) FORMAT="xml" ;;
            sarif) FORMAT="sarif" ;;
            *) FORMAT="text" ;;
          esac
        fi

        echo "🧠 Detected format: $FORMAT" >> "$GITHUB_STEP_SUMMARY"
        echo "## 🧩 $TOOL - $TITLE" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        FAIL_FOUND=0
        declare -A METRICS

        if [[ "$FORMAT" == "text" ]]; then
          echo "| Keyword | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---------|-------|" >> "$GITHUB_STEP_SUMMARY"
          for word in ERROR FAILED FAIL Traceback Exception; do
            COUNT=$(grep -ic "$word" "$REPORT" || true)
            [[ "$COUNT" -gt 0 ]] && FAIL_FOUND=1
            echo "| $word | $COUNT |" >> "$GITHUB_STEP_SUMMARY"
          done
          echo ""

          echo "### 🔎 Pattern Matches" >> "$GITHUB_STEP_SUMMARY"
          echo "| Pattern | Match |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---------|--------|" >> "$GITHUB_STEP_SUMMARY"

          MATCH=$(grep -Eo "rated at [0-9]+\.[0-9]+/10" "$REPORT" | head -n 1)
          if [[ -n "$MATCH" ]]; then
            VALUE=$(echo "$MATCH" | grep -Eo "[0-9]+\.[0-9]+")
            METRICS["Code Quality"]="$VALUE"
            echo "| Code Quality | $MATCH |" >> "$GITHUB_STEP_SUMMARY"
          fi

          MATCHES=$(grep -Eo "Total: [0-9]+ \\(HIGH: [0-9]+, CRITICAL: [0-9]+\\)" "$REPORT" | head -n 2)
          while IFS= read -r line; do
            CRITICAL=$(echo "$line" | grep -Eo "CRITICAL: [0-9]+" | cut -d' ' -f2)
            [[ -n "$CRITICAL" ]] && METRICS["CRITICAL"]="$CRITICAL"
            echo "| Vulnerabilities | $line |" >> "$GITHUB_STEP_SUMMARY"
          done <<< "$MATCHES"
        fi

        if [[ -n "$THRESHOLD_CHECKS" ]]; then
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🚨 Threshold Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "| Metric | Operator | Value | Actual | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|----------|-------|--------|--------|" >> "$GITHUB_STEP_SUMMARY"

          IFS=',' read -ra THRESHOLDS <<< "$THRESHOLD_CHECKS"
          for threshold in "${THRESHOLDS[@]}"; do
            IFS=':' read -r METRIC OPERATOR VALUE <<< "$threshold"

            # Clean whitespace
            METRIC=$(echo "$METRIC" | xargs)
            OPERATOR=$(echo "$OPERATOR" | xargs)
            VALUE=$(echo "$VALUE" | xargs)

            ACTUAL="N/A"
            case "$METRIC" in
              "Code Quality")
                ACTUAL=$(grep -Eo "rated at [0-9\.]+/10" "$REPORT" | grep -Eo "[0-9\.]+" | head -n 1)
                ;;
              "CRITICAL")
                ACTUAL=$(grep -Eo "CRITICAL: [0-9]+" "$REPORT" | grep -Eo "[0-9]+" | head -n 1)
                ;;
              "HIGH")
                ACTUAL=$(grep -Eo "HIGH: [0-9]+" "$REPORT" | grep -Eo "[0-9]+" | head -n 1)
                ;;
            esac

            PASS="✅"
            if [[ "$ACTUAL" != "N/A" ]]; then
              if ! awk "BEGIN {exit !($ACTUAL $OPERATOR $VALUE)}"; then
                PASS="❌"
                FAIL_FOUND=1
              else
                PASS="✅"
              fi
            else
              PASS="❌"
              FAIL_FOUND=1
            fi

            echo "| $METRIC | $OPERATOR | $VALUE | ${ACTUAL:-N/A} | $PASS |" >> "$GITHUB_STEP_SUMMARY"
          done
        fi

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "<details><summary>📄 Raw Report (Top $MAX_LINES lines)</summary>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        head -n "$MAX_LINES" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"

        if [[ -n "$FAIL_KEYWORDS" ]]; then
          IFS=',' read -ra KEYWORDS <<< "$FAIL_KEYWORDS"
          for word in "${KEYWORDS[@]}"; do
            if grep -iq "$word" "$REPORT"; then
              echo "❌ Keyword '$word' found in report, failing step"
              exit 1
            fi
          done
        fi

        if [[ "$FAIL_FOUND" -eq 1 ]]; then
          echo "❌ Threshold or pattern checks failed"
          exit 1
        fi