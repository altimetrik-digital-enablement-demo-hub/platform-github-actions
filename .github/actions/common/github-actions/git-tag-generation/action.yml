name: Auto Version Tag
description: 'Automatically generate a semantic version tag based on commit messages'

outputs:
  tag:
    description: "The new semantic version tag"
    value: ${{ steps.set-tag.outputs.tag }}

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

  # This step sets up Git configuration for the action
    - name: Setup Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    # This step determines the new tag based on commit messages
    - name: Determine tag from commits
      shell: bash
      id: set-tag
      run: |
        DEFAULT_VERSION="v0.1.0"
        git fetch --tags

        LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
        if [ -z "$LATEST_TAG" ]; then
          VERSION="0.1.0"
          RANGE=""
        else
          VERSION="${LATEST_TAG#v}"
          RANGE="$LATEST_TAG..HEAD"
        fi

        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

        COMMITS=$(git log $RANGE --pretty=format:"%s")
        echo "Commit messages in range $RANGE:"
        echo "$COMMITS"

        BUMP=""

        while IFS= read -r COMMIT; do
          # Lowercase for consistent matching
          LOWER=$(echo "$COMMIT" | tr '[:upper:]' '[:lower:]')

          # Use regex to find first keyword: major, feat, fix
          if [[ "$LOWER" =~ (^|[^a-zA-Z0-9])(major|feat|fix)([:[:space:]]|$) ]]; then
            FIRST_KEYWORD="${BASH_REMATCH[2]}"

            case "$FIRST_KEYWORD" in
              major)
                BUMP="major"
                break
                ;;
              feat)
                [[ "$BUMP" != "major" ]] && BUMP="minor"
                ;;
              fix)
                [[ "$BUMP" != "major" && "$BUMP" != "minor" ]] && BUMP="patch"
                ;;
            esac
          fi
        done <<< "$COMMITS"

        if [ -z "$BUMP" ]; then
          echo "No valid semantic keyword found. Skipping tag."
          echo "tag=" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        case $BUMP in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        git tag "$NEW_TAG"
        git push origin "$NEW_TAG"
        echo "Pushed new tag: $NEW_TAG"

        echo "tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
