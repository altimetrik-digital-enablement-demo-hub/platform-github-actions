name: Package Application
description: Downloads binary artifact, builds Docker image, and uploads image artifact

inputs:
  app-name:
    description: Name of the application
    required: true
  image-tag:
    description: Docker image tag
    required: true
  binary-artifact-name:
    description: Name of the binary artifact to download
    required: false
    default: 'go-binary'
  binary-name:
    description: Name of the binary file
    required: false
    default: 'app'
  dockerfile-path:
    description: Path to Dockerfile
    required: false
    default: './Dockerfile'
  docker-context:
    description: Docker build context
    required: false
    default: '.'
  registry-url:
    description: Container registry URL (e.g., AWS ECR)
    required: false
  push-to-registry:
    description: Whether to push to registry instead of saving as tar
    required: false
    default: 'false'

outputs:
  image-tag:
    description: "The Docker image tag that was used"
    value: ${{ inputs.image-tag }}

runs:
  using: 'composite'
  steps:
    - name: Debug inputs
      shell: bash
      run: |
        echo "app-name: ${{ inputs.app-name }}"
        echo "image-tag: ${{ inputs.image-tag }}"
        echo "binary-artifact-name: ${{ inputs.binary-artifact-name }}"
        echo "binary-name: ${{ inputs.binary-name }}"

    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.binary-artifact-name }}
        path: ./

    - name: Make binary executable
      shell: bash
      run: chmod +x ${{ inputs.binary-name }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials (if using ECR)
      if: inputs.push-to-registry == 'true' && contains(inputs.registry-url, 'amazonaws.com')
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: inputs.push-to-registry == 'true' && contains(inputs.registry-url, 'amazonaws.com')
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push to registry
      if: inputs.push-to-registry == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.dockerfile-path }}
        platforms: linux/amd64
        tags: ${{ inputs.registry-url }}/${{ inputs.app-name }}:${{ inputs.image-tag }}
        push: true

    - name: Build Docker image (tar output)
      if: inputs.push-to-registry != 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.dockerfile-path }}
        platforms: linux/amd64
        tags: ${{ inputs.app-name }}:${{ inputs.image-tag }}
        outputs: type=docker,dest=/tmp/${{ inputs.app-name }}.tar

    - name: Upload Docker image artifact
      if: inputs.push-to-registry != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.app-name }}-image
        path: /tmp/${{ inputs.app-name }}.tar