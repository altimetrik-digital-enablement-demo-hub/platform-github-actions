name: Security Scan
description: Runs CodeQL source code analysis and Trivy container vulnerability scanning

inputs:
  app-name:
    description: Name of the application
    required: true
  image-tag:
    description: Docker image tag to scan
    required: true
  languages:
    description: Programming languages to scan (comma-separated)
    required: false
    default: 'go'
  go-version:
    description: Go version for CodeQL analysis
    required: false
    default: '1.24'
  node-version:
    description: Node.js version for CodeQL analysis
    required: false
    default: '20'
  python-version:
    description: Python version for CodeQL analysis
    required: false
    default: '3.11'
  dotnet-version:
    description: .NET version for CodeQL analysis
    required: false
    default: '8.0'
  full-image-name:
    description: Full image name with registry (e.g., ghcr.io/owner/repo/app:tag)
    required: false
  use-registry-image:
    description: Whether to use registry image instead of loading from tar
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Debug inputs
      shell: bash
      run: |
        echo "app-name: ${{ inputs.app-name }}"
        echo "image-tag: ${{ inputs.image-tag }}"
        echo "languages: ${{ inputs.languages }}"

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with: 
        languages: ${{ inputs.languages }}

    - name: Set up Go (if needed)
      if: contains(inputs.languages, 'go')
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Set up Node.js (if needed)
      if: contains(inputs.languages, 'javascript') || contains(inputs.languages, 'typescript')
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Set up Python (if needed)
      if: contains(inputs.languages, 'python')
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up .NET (if needed)
      if: contains(inputs.languages, 'csharp')
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Build for CodeQL
      shell: bash
      run: |
        echo "Building for languages: ${{ inputs.languages }}"
        
        if [[ "${{ inputs.languages }}" == *"go"* ]]; then
          echo "🔨 Building Go application..."
          go build ./...
        fi
        
        if [[ "${{ inputs.languages }}" == *"python"* ]]; then
          echo "🐍 Python - no build needed"
        fi
        
        if [[ "${{ inputs.languages }}" == *"csharp"* ]]; then
          echo "🔨 Building .NET application..."
          dotnet build
        fi
        
        if [[ "${{ inputs.languages }}" == *"javascript"* ]] || [[ "${{ inputs.languages }}" == *"typescript"* ]]; then
          echo "🔨 Building JavaScript/TypeScript application..."
          if [ -f "package.json" ]; then
            npm ci
            npm run build || echo "No build script found, continuing..."
          else
            echo "No package.json found, skipping npm build"
          fi
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true
      with:
        output: codeql-results
        upload: false

    - name: Upload CodeQL results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeql-scan-results-${{ inputs.languages }}
        path: codeql-results

    - name: Login to GitHub Container Registry (if using registry image)
      if: inputs.use-registry-image == 'true' && contains(inputs.full-image-name, 'ghcr.io')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Determine image reference
      id: image-ref
      shell: bash
      run: |
        if [ "${{ inputs.use-registry-image }}" == "true" ] && [ -n "${{ inputs.full-image-name }}" ]; then
          IMAGE_REF="${{ inputs.full-image-name }}"
          echo "Using registry image: ${IMAGE_REF}"
        else
          IMAGE_REF="${{ inputs.app-name }}:${{ inputs.image-tag }}"
          echo "Using local image: ${IMAGE_REF}"
        fi
        echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT

    - name: Download container image (if not using registry)
      if: inputs.use-registry-image != 'true'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.app-name }}-image
        path: /tmp/

    - name: Load container image (if not using registry)
      if: inputs.use-registry-image != 'true'
      shell: bash
      run: docker load -i /tmp/${{ inputs.app-name }}.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-ref.outputs.image-ref }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-security-scan-results
        path: trivy-results.sarif

    - name: Generate security report
      shell: bash
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # CodeQL Results Summary
        echo "### 📊 CodeQL Analysis" >> $GITHUB_STEP_SUMMARY
        if [ -d "codeql-results" ]; then
          # Count issues by severity
          if [ -f "codeql-results/results.sarif" ]; then
            CRITICAL=$(jq '.runs[0].results | map(select(.ruleId and (.level == "error" or .rank >= 8.0))) | length' codeql-results/results.sarif 2>/dev/null || echo "0")
            HIGH=$(jq '.runs[0].results | map(select(.ruleId and (.level == "warning" or (.rank >= 6.0 and .rank < 8.0)))) | length' codeql-results/results.sarif 2>/dev/null || echo "0")
            MEDIUM=$(jq '.runs[0].results | map(select(.ruleId and (.rank >= 4.0 and .rank < 6.0))) | length' codeql-results/results.sarif 2>/dev/null || echo "0")
            LOW=$(jq '.runs[0].results | map(select(.ruleId and .rank < 4.0)) | length' codeql-results/results.sarif 2>/dev/null || echo "0")
            TOTAL=$(jq '.runs[0].results | length' codeql-results/results.sarif 2>/dev/null || echo "0")
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "| **📊 Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Set environment variables for later use
            echo "CODEQL_CRITICAL=$CRITICAL" >> $GITHUB_ENV
            echo "CODEQL_HIGH=$HIGH" >> $GITHUB_ENV
            echo "CODEQL_TOTAL=$TOTAL" >> $GITHUB_ENV
          else
            echo "✅ No CodeQL results file found - scan may have completed without issues" >> $GITHUB_STEP_SUMMARY
            echo "CODEQL_TOTAL=0" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ CodeQL results directory not found" >> $GITHUB_STEP_SUMMARY
          echo "CODEQL_TOTAL=unknown" >> $GITHUB_ENV
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Parse Trivy results and generate summary
      shell: bash
      run: |
        echo "### 🛡️ Container Vulnerability Scan (Trivy)" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-results.sarif" ]; then
          # Parse SARIF results for vulnerabilities
          CRITICAL_VULN=$(jq '.runs[0].results | map(select(.ruleId and ((.properties.security_severity | tonumber) == 9 or (.properties.security_severity | tonumber) == 10))) | length' trivy-results.sarif 2>/dev/null || echo "0")
          HIGH_VULN=$(jq '.runs[0].results | map(select(.ruleId and ((.properties.security_severity | tonumber) >= 7 and (.properties.security_severity | tonumber) < 9))) | length' trivy-results.sarif 2>/dev/null || echo "0")
          MEDIUM_VULN=$(jq '.runs[0].results | map(select(.ruleId and ((.properties.security_severity | tonumber) >= 4 and (.properties.security_severity | tonumber) < 7))) | length' trivy-results.sarif 2>/dev/null || echo "0")
          LOW_VULN=$(jq '.runs[0].results | map(select(.ruleId and ((.properties.security_severity | tonumber) > 0 and (.properties.security_severity | tonumber) < 4))) | length' trivy-results.sarif 2>/dev/null || echo "0")
          UNKNOWN_VULN=$(jq '.runs[0].results | map(select(.ruleId and ((.properties.security_severity | tonumber) == 0))) | length' trivy-results.sarif 2>/dev/null || echo "0")
          TOTAL_VULN=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
          
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Critical | $CRITICAL_VULN |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 High     | $HIGH_VULN |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium   | $MEDIUM_VULN |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟢 Low      | $LOW_VULN |" >> $GITHUB_STEP_SUMMARY
          echo "| ❓ Unknown  | $UNKNOWN_VULN |" >> $GITHUB_STEP_SUMMARY
          echo "| **📊 Total** | **$TOTAL_VULN** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set environment variables
          echo "TRIVY_CRITICAL=$CRITICAL_VULN" >> $GITHUB_ENV
          echo "TRIVY_HIGH=$HIGH_VULN" >> $GITHUB_ENV
          echo "TRIVY_TOTAL=$TOTAL_VULN" >> $GITHUB_ENV
          echo "TRIVY_MEDIUM=$MEDIUM_VULN" >> $GITHUB_ENV
          echo "TRIVY_LOW=$LOW_VULN" >> $GITHUB_ENV
          echo "TRIVY_UNKNOWN=$UNKNOWN_VULN" >> $GITHUB_ENV
          
          # Show top vulnerabilities if any
          if [ "$TOTAL_VULN" -gt "0" ]; then
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>🔍 Top Vulnerabilities (Click to expand)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[0].results[0:10][] | "• \(.ruleId // "Unknown"): \(.message.text // "No description")"' trivy-results.sarif 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "No detailed vulnerability information available" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Trivy results file not found" >> $GITHUB_STEP_SUMMARY
          echo "TRIVY_TOTAL=unknown" >> $GITHUB_ENV
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Generate overall security summary
      shell: bash
      run: |
        echo "### 📋 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall security status
        CODEQL_ISSUES="${CODEQL_TOTAL:-0}"
        TRIVY_ISSUES="${TRIVY_TOTAL:-0}"
        CODEQL_CRITICAL="${CODEQL_CRITICAL:-0}"
        TRIVY_CRITICAL="${TRIVY_CRITICAL:-0}"
        
        if [ "$CODEQL_CRITICAL" -gt "0" ] || [ "$TRIVY_CRITICAL" -gt "0" ]; then
          STATUS="🔴 **CRITICAL ISSUES FOUND**"
          RECOMMENDATION="⚠️ **Action Required:** Address critical security issues before deployment"
        elif [ "$CODEQL_ISSUES" -gt "0" ] || [ "$TRIVY_ISSUES" -gt "0" ]; then
          STATUS="🟡 **Issues Found**"
          RECOMMENDATION="💡 **Recommended:** Review and address security findings"
        else
          STATUS="✅ **No Security Issues Detected**"
          RECOMMENDATION="🎉 **Great!** No security issues found in this scan"
        fi
        
        echo "**Overall Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "$RECOMMENDATION" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Issues Found |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL (Source Code) | $CODEQL_ISSUES |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy (Container) | $TRIVY_ISSUES |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📎 **Artifacts:** Detailed reports available as workflow artifacts" >> $GITHUB_STEP_SUMMARY

    - name: Add security comment to PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: security-scan
        recreate: true
        message: |
          ## 🔒 Security Scan Results
          
          **CodeQL Analysis:** ${{ env.CODEQL_TOTAL }} issues found
          **Container Scan:** ${{ env.TRIVY_TOTAL }} vulnerabilities found
          
          **Critical Issues:** ${{ env.CODEQL_CRITICAL }} (CodeQL) + ${{ env.TRIVY_CRITICAL }} (Trivy)
          
          <details>
          <summary>📊 Detailed Breakdown</summary>
          
          ### CodeQL (Source Code Analysis)
          - 🔴 Critical: ${{ env.CODEQL_CRITICAL }}
          - 🟠 High: ${{ env.CODEQL_HIGH }}
          - 🟡 Medium: ${{ env.CODEQL_MEDIUM }}
          - 🟢 Low: ${{ env.CODEQL_LOW }}
          - ❓ Unknown: ${{ env.CODEQL_UNKNOWN }}
          
          ### Trivy (Container Vulnerabilities)  
          - 🔴 Critical: ${{ env.TRIVY_CRITICAL }}
          - 🟠 High: ${{ env.TRIVY_HIGH }}
          - 🟡 Medium: ${{ env.TRIVY_MEDIUM }}
          - 🟢 Low: ${{ env.TRIVY_LOW }}
          - ❓ Unknown: ${{ env.TRIVY_UNKNOWN }}
          </details>
          
          💡 **Download detailed reports from workflow artifacts**

    - name: Security gate check
      shell: bash
      run: |
        CODEQL_CRITICAL="${CODEQL_CRITICAL:-0}"
        TRIVY_CRITICAL="${TRIVY_CRITICAL:-0}"
        
        if [ "$CODEQL_CRITICAL" -gt "0" ] || [ "$TRIVY_CRITICAL" -gt "0" ]; then
          echo "❌ Security gate failed: Critical security issues found"
          echo "CodeQL Critical: $CODEQL_CRITICAL"
          echo "Trivy Critical: $TRIVY_CRITICAL"
          # Uncomment the next line if you want to fail the pipeline on critical issues
          # exit 1
        else
          echo "✅ Security gate passed: No critical security issues found"
        fi