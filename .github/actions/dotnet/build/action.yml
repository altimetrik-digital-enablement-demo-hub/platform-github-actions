name: dotnet-setup
description: Setup .NET environment

inputs:
  app-name:
    description: Application name
    required: true
  language:
    description: Programming language used in the application
    required: false
    default: 'csharp'
  dotnet-version:
    description: The .NET SDK version to use
    required: false
    default: '9.0.300'
  git-fetch-depth:
    description: The depth of the git fetch
    required: false
    default: "1"
  token:
    description: 'A Github PAT'
    required: true
  
runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true  

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.language }}

    - name: install dependencies
      shell: bash
      run: dotnet restore
    
    - name: dotnet build ${{ inputs.app-name }}
      shell: bash
      run: |
        dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

    - name: Install Versionize
      shell: bash
      run: dotnet tool install --global Versionize
    - name: Setup git
      shell: bash
      run: |
        git config --local user.email "gituser@github.com"
        git config --local user.name "Git User"
        
        echo "debugging version info"
        git log --oneline | head -n 5
        cat /home/runner/work/NetWebApi/NetWebApi/src/NetWebApi.API/NetWebApi.API.csproj

    - name: Versionize Release
      id: versionize
      shell: bash
      run: |
        echo "debugging version info"
        git log --oneline | head -n 5

        echo "Running Versionize to determine if a release is needed"
        versionize --version 
        versionize --exit-insignificant-commits
        echo "app_version=$(versionize inspect)" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Check versionize result
      if: steps.versionize.outcome == 'success'
      id: check_versionize
      shell: bash
      run: |
        echo "Current app version: ${{ steps.versionize.outputs.app_version }}" 
    - name: No release required
      if: steps.versionize.outcome != 'success'
      shell: bash
      run: echo "Skipping Release. No release required."
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ inputs.token }}
        branch: ${{ github.ref }}
        tags: true

    - name: 'Create release'
      if: steps.versionize.outcome == 'success'
      uses: 'actions/github-script@v5'
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }

