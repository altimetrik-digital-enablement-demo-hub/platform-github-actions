name: Deploy to Azure Container Apps
description: Deploys application to Azure Container Apps

inputs:
  app-name:
    description: Name of the application
    required: true
  environment:
    description: Target environment (dev, staging, prod)
    required: true
  image-tag:
    description: Docker image tag to deploy
    required: true
  image-repository:
    description: Full image repository URL
    required: true
  resource-group:
    description: Azure Resource Group name
    required: false
    default: 'rg-container-apps'
  location:
    description: Azure location/region
    required: false
    default: 'eastus'
  container-port:
    description: Container port
    required: false
    default: '8080'
  cpu:
    description: CPU allocation
    required: false
    default: '0.25'
  memory:
    description: Memory allocation
    required: false
    default: '0.5Gi'
  min-replicas:
    description: Minimum replicas
    required: false
    default: '0'
  max-replicas:
    description: Maximum replicas
    required: false
    default: '3'

runs:
  using: 'composite'
  steps:
    - name: Generate Azure Container App configuration
      shell: bash
      run: |
        echo "Generating Azure Container Apps configuration for ${{ inputs.app-name }}:${{ inputs.image-tag }}..."
        
        # Create Azure CLI deployment script
        cat <<EOF > deploy-azure.sh
        #!/bin/bash
        set -e
        
        echo "üöÄ Deploying ${{ inputs.app-name }} to Azure Container Apps..."
        
        # Create resource group if it doesn't exist
        echo "üì¶ Ensuring resource group exists..."
        az group create --name ${{ inputs.resource-group }} --location ${{ inputs.location }} --output table
        
        # Create Container Apps environment if it doesn't exist
        echo "üåç Ensuring Container Apps environment exists..."
        az containerapp env create \\
          --name ${{ inputs.app-name }}-env \\
          --resource-group ${{ inputs.resource-group }} \\
          --location ${{ inputs.location }} \\
          --output table || echo "Environment already exists"
        
        # Deploy/Update Container App
        echo "üîÑ Deploying container app..."
        az containerapp create \\
          --name ${{ inputs.app-name }}-${{ inputs.environment }} \\
          --resource-group ${{ inputs.resource-group }} \\
          --environment ${{ inputs.app-name }}-env \\
          --image ${{ inputs.image-repository }}/${{ inputs.app-name }}:${{ inputs.image-tag }} \\
          --target-port ${{ inputs.container-port }} \\
          --ingress external \\
          --env-vars ENVIRONMENT=${{ inputs.environment }} \\
          --cpu ${{ inputs.cpu }} --memory ${{ inputs.memory }} \\
          --min-replicas ${{ inputs.min-replicas }} --max-replicas ${{ inputs.max-replicas }} \\
          --output table || \\
        az containerapp update \\
          --name ${{ inputs.app-name }}-${{ inputs.environment }} \\
          --resource-group ${{ inputs.resource-group }} \\
          --image ${{ inputs.image-repository }}/${{ inputs.app-name }}:${{ inputs.image-tag }} \\
          --output table
        
        echo "üéâ Azure Container Apps deployment completed!"
        
        # Get the app URL
        echo "üåê Getting application URL..."
        az containerapp show \\
          --name ${{ inputs.app-name }}-${{ inputs.environment }} \\
          --resource-group ${{ inputs.resource-group }} \\
          --query "properties.configuration.ingress.fqdn" \\
          --output tsv
        EOF
        
        chmod +x deploy-azure.sh
        
        # Also create YAML configuration for reference
        cat <<EOF > azure-containerapp.yaml
        apiVersion: 2023-05-01
        type: Microsoft.App/containerApps
        name: ${{ inputs.app-name }}-${{ inputs.environment }}
        location: ${{ inputs.location }}
        properties:
          managedEnvironmentId: /subscriptions/{subscription-id}/resourceGroups/${{ inputs.resource-group }}/providers/Microsoft.App/managedEnvironments/${{ inputs.app-name }}-env
          configuration:
            ingress:
              external: true
              targetPort: ${{ inputs.container-port }}
              allowInsecure: false
          template:
            containers:
            - name: ${{ inputs.app-name }}
              image: ${{ inputs.image-repository }}/${{ inputs.app-name }}:${{ inputs.image-tag }}
              env:
              - name: ENVIRONMENT
                value: ${{ inputs.environment }}
              resources:
                cpu: ${{ inputs.cpu }}
                memory: ${{ inputs.memory }}
            scale:
              minReplicas: ${{ inputs.min-replicas }}
              maxReplicas: ${{ inputs.max-replicas }}
        EOF
        
        echo "Generated Azure Container App configurations"

    - name: Deploy to Azure (if Azure CLI configured)
      shell: bash
      run: |
        if command -v az &> /dev/null && az account show &> /dev/null; then
          echo "‚úÖ Azure CLI configured - deploying..."
          ./deploy-azure.sh
        else
          echo "‚ö†Ô∏è  Azure CLI not configured - skipping deployment"
          echo "üí° Upload configurations as artifact for manual deployment"
        fi

    - name: Upload Azure Container App configurations
      uses: actions/upload-artifact@v4
      with:
        name: azure-containerapp-config-${{ inputs.app-name }}-${{ inputs.environment }}
        path: |
          azure-containerapp.yaml
          deploy-azure.sh 