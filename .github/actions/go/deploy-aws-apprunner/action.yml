name: Deploy to AWS App Runner
description: Deploys application to AWS App Runner

inputs:
  app-name:
    description: Name of the application
    required: true
  environment:
    description: Target environment (dev, staging, prod)
    required: true
  image-tag:
    description: Docker image tag to deploy
    required: true
  image-registry:
    description: Full image registry URL (e.g., ECR URL)
    required: true
  container-port:
    description: Container port
    required: false
    default: '8080'
  cpu:
    description: CPU allocation
    required: false
    default: '0.25 vCPU'
  memory:
    description: Memory allocation
    required: false
    default: '0.5 GB'

runs:
  using: 'composite'
  steps:
    - name: Generate App Runner configuration
      shell: bash
      run: |
        echo "Generating AWS App Runner configuration for ${{ inputs.app-name }}:${{ inputs.image-tag }}..."
        
        cat <<EOF > apprunner-config.json
        {
          "ServiceName": "${{ inputs.app-name }}-${{ inputs.environment }}",
          "SourceConfiguration": {
            "ImageRepository": {
              "ImageIdentifier": "${{ inputs.image-registry }}/${{ inputs.app-name }}:${{ inputs.image-tag }}",
              "ImageConfiguration": {
                "Port": "${{ inputs.container-port }}",
                "RuntimeEnvironmentVariables": {
                  "ENVIRONMENT": "${{ inputs.environment }}"
                }
              },
              "ImageRepositoryType": "ECR"
            },
            "AutoDeploymentsEnabled": true
          },
          "InstanceConfiguration": {
            "Cpu": "${{ inputs.cpu }}",
            "Memory": "${{ inputs.memory }}"
          }
        }
        EOF
        
        echo "Generated App Runner configuration:"
        cat apprunner-config.json

    - name: Deploy to App Runner (if AWS CLI configured)
      shell: bash
      run: |
        if command -v aws &> /dev/null && aws sts get-caller-identity &> /dev/null; then
          echo "‚úÖ AWS CLI configured - deploying to App Runner..."
          
          # Check if service exists
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ inputs.app-name }}-${{ inputs.environment }}'].ServiceArn" --output text)
          
          if [ -z "$SERVICE_ARN" ]; then
            echo "üöÄ Creating new App Runner service..."
            aws apprunner create-service --cli-input-json file://apprunner-config.json
          else
            echo "üîÑ Updating existing App Runner service..."
            aws apprunner update-service --service-arn "$SERVICE_ARN" --cli-input-json file://apprunner-config.json
          fi
          
          echo "üéâ App Runner deployment completed!"
        else
          echo "‚ö†Ô∏è  AWS CLI not configured - skipping deployment"
          echo "üí° Upload configuration as artifact for manual deployment"
        fi

    - name: Upload App Runner configuration
      uses: actions/upload-artifact@v4
      with:
        name: apprunner-config-${{ inputs.app-name }}-${{ inputs.environment }}
        path: apprunner-config.json 