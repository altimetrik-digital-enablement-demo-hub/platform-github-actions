name: Simple Kind Cluster Test
description: Create a Kind cluster and test basic functionality

inputs:
  app-name:
    description: 'Application name for cluster naming'
    required: true
    default: 'test-app'
  registry:
    required: true
    description: 'Container registry URL (e.g., ghcr.io, AWS ECR)'
    default: 'ghcr.io'
  image-tag:
    description: 'Docker image tag to deploy'
    required: true
    default: 'latest'
  chart-path:
    description: 'Path to the Helm chart for deployment'
    required: false
    default: './deploy/helm'
  namespace:
    description: 'Kubernetes namespace'
    required: false
    default: 'default'

runs:
  using: 'composite'
  steps:
    - name: Create Kind cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: ${{ inputs.app-name }}-test
        wait: 60s

    - name: Test cluster
      shell: bash
      run: |
        echo "🎯 Testing Kind cluster..."
        # Test cluster is working
        kubectl cluster-info
        kubectl get nodes
        echo "✅ Cluster is ready!"

    - name: Deploy app with Helm
      uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/helm-deployment@v1
      with: 
        app-name: ${{ inputs.app-name }}
        chart-path: ${{ inputs.chart-path }}
        namespace: ${{ inputs.namespace }}
        repository: ${{ inputs.registry }}
        tag: ${{ inputs.image-tag}}
        args: >-
          --atomic
          --wait
          --timeout 2m 
          --wait-for-jobs
          --debug
          
    - name: Verify deployment
      shell: bash
      run: |
        echo "🔍 Verifying deployment..."
        
        # Get deployment status
        kubectl get deployment -n ${{ inputs.namespace }} -l app.kubernetes.io/name=${{ inputs.app-name }} -o wide
        
        # Get pods with their images
        echo "📦 Pod details:"
        kubectl get pods -n ${{ inputs.namespace }} -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,IMAGE:.spec.containers[0].image
        
        # Get services
        echo "🔌 Service details:"
        kubectl get services -n ${{ inputs.namespace }}
        
        echo "✅ Deployment verification complete!"

    - name: Cleanup test resources
      shell: bash
      if: always()
      run: |
        echo "🧹 Cleaning up test resources..."
        kubectl delete namespace ${{ inputs.namespace }} --ignore-not-found=true || true