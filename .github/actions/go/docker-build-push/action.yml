name: Package Application
description: Downloads binary artifact, builds Docker image, and pushes to container registry or saves as artifact

inputs:
  app-name:
    description: Name of the application
    required: true
  image-tag:
    description: Docker image tag
    required: true
  dockerfile-path:
    description: Path to Dockerfile
    required: false
    default: './Dockerfile'
  docker-context:
    description: Docker build context
    required: false
    default: '.'
  registry:
    description: Container registry base URL
    required: false
    default: 'ghcr.io'
  push-to-registry:
    description: Whether to push to registry instead of saving as tar
    required: false
    default: 'true'
  platforms:
    description: Target platforms to build for (comma-separated)
    required: false
    default: 'linux/amd64,linux/arm64'

outputs:
  image-tag:
    description: "The Docker image tag that was used"
    value: ${{ inputs.image-tag }}
  full-image-name:
    description: "The full image name with registry and tag"
    value: ${{ steps.image-name.outputs.full-name }}

runs:
  using: 'composite'
  steps:
    - name: Debug inputs
      shell: bash
      run: |
        echo "app-name: ${{ inputs.app-name }}"
        echo "image-tag: ${{ inputs.image-tag }}"
        echo "registry: ${{ inputs.registry }}"
        echo "push-to-registry: ${{ inputs.push-to-registry }}"

    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.binary-artifact-name }}
        path: ./

    - name: Make binary executable
      shell: bash
      run: chmod +x ${{ inputs.app-name }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate full image name
      id: image-name
      shell: bash
      run: |
        if [ "${{ inputs.push-to-registry }}" == "true" ]; then
          if [[ "${{ inputs.registry }}" == "ghcr.io" ]]; then
            # GitHub Container Registry format: ghcr.io/owner/repo/app-name:tag
            REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
            FULL_NAME="ghcr.io/${REPO_OWNER}/${REPO_NAME}/${{ inputs.app-name }}:${{ inputs.image-tag }}"
          else
            # Other registries
            FULL_NAME="${{ inputs.registry }}/${{ inputs.app-name }}:${{ inputs.image-tag }}"
          fi
          echo "full-name=${FULL_NAME}" >> $GITHUB_OUTPUT
          echo "Full image name: ${FULL_NAME}"
        else
          echo "full-name=${{ inputs.app-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Login to Container Registry
      if: inputs.push-to-registry == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and push to registry
      if: inputs.push-to-registry == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.dockerfile-path }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.image-name.outputs.full-name }}
        push: true
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

    - name: Generate package summary
      shell: bash
      run: |
        echo "## ðŸ“¦ Package Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.push-to-registry }}" == "true" ]; then
          echo "âœ… **Image pushed to registry**" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ steps.image-name.outputs.full-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— **Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.image-name.outputs.full-name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "âœ… **Image saved as artifact**" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** ${{ inputs.app-name }}-image" >> $GITHUB_STEP_SUMMARY
          echo "- **File:** ${{ inputs.app-name }}.tar" >> $GITHUB_STEP_SUMMARY
        fi