name: Go Release Pipeline

on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: '1.24'
      release-bump:
        required: false
        type: string
        default: 'Minor'
        description: 'Release bump type (Major, Minor, Patch)'
      version-override:
        required: false
        type: string
        description: 'Optional: manually specify version (e.g., v1.3.0)'
      docker-registry:
        required: false
        type: string
        description: 'Docker registry for container images'
      create-docker-images:
        required: false
        type: boolean
        default: false
        description: 'Whether to build and push Docker images'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-latest-tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"

      - name: Calculate new version
        id: version
        run: |
          if [ -n "${{ inputs.version-override }}" ]; then
            new_version=${{ inputs.version-override }}
            echo "Using override version: $new_version"
          else
            current_version=${{ steps.get-latest-tag.outputs.latest-tag }}
            current_version=${current_version#v}
            IFS='.' read -r major minor patch <<< "$current_version"
            
            case "${{ inputs.release-bump }}" in
              "Major")
                new_version="v$((major + 1)).0.0"
                ;;
              "Minor")
                new_version="v${major}.$((minor + 1)).0"
                ;;
              "Patch")
                new_version="v${major}.${minor}.$((patch + 1))"
                ;;
              *)
                echo "Invalid release bump type: ${{ inputs.release-bump }}"
                exit 1
                ;;
            esac
            echo "Calculated new version: $new_version"
          fi
          echo "new-version=$new_version" >> $GITHUB_OUTPUT

      - name: Generate changelog preview
        id: changelog
        run: |
          echo "## Changelog for ${{ steps.version.outputs.new-version }}" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            echo "### Changes since $last_tag:" >> changelog.md
            git log --oneline $last_tag..HEAD --pretty=format:"- %s (%h)" >> changelog.md
          else
            echo "### Initial release" >> changelog.md
            git log --oneline --pretty=format:"- %s (%h)" >> changelog.md
          fi
          cat changelog.md
          {
            echo "changelog<<EOTCHANGELOG123"
            cat changelog.md
            echo "EOTCHANGELOG123"
          } >> $GITHUB_OUTPUT

  test-before-release:
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Run tests
        run: |
          go test -v ./...
          echo "âœ… All tests passed for release ${{ needs.prepare-release.outputs.new-version }}"

      - name: Run linting
        uses: osru-leu/platform-github-actions/.github/actions/go-templates/lint@feature/workflows
        with:
          go-version: ${{ inputs.go-version }}

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, test-before-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.prepare-release.outputs.new-version }}
          git push origin ${{ needs.prepare-release.outputs.new-version }}

      - name: Set up Docker Buildx
        if: inputs.create-docker-images
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        if: inputs.create-docker-images && inputs.docker-registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        run: |
          echo "## ðŸš€ Release ${{ needs.prepare-release.outputs.new-version }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application:** ${{ inputs.app-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version:** ${{ inputs.go-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type:** ${{ inputs.release-bump }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Assets](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.prepare-release.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY 