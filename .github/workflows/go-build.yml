name: Go Dev Build Pipeline

on:
  workflow_call:
    inputs:
      app-name:
        description: 'Name of the application (used for binary name, image name, etc.)'
        required: true
        type: string
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: '1.24'
      main-package-path:
        description: 'Path to the main package (where main.go is located)'
        required: false
        type: string
        default: './cmd'
      registry:
        required: false
        type: string
        description: 'Container registry URL (e.g., ghcr.io, AWS ECR)'
        default: 'ghcr.io'
      docker-context:
        description: 'Context for Docker build. Default src/NetWebApi.API.'
        required: false
        type: string
        default: '.'
      docker-file:
        description: 'Dockerfile path. Default ./Dockerfile; can be set to a custom Dockerfile path'
        required: false
        type: string
        default: './Dockerfile'
      docker-push:
        description: 'Push the Docker image to the registry. Default true'
        required: false
        type: boolean
        default: true

permissions:
  actions: read
  contents: write
  security-events: write
  checks: write          
  pull-requests: write
  issues: write
  packages: write    
  id-token: write    

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Lint Go code
        uses: osru-leu/platform-github-actions/.github/actions/go/lint@feature/go-release
        with:
          go-version: ${{ inputs.go-version }}
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Run unit tests
        uses: osru-leu/platform-github-actions/.github/actions/go/unit-test@feature/go-release
        with:
          go-version: ${{ inputs.go-version }}
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Build Go application
        uses: osru-leu/platform-github-actions/.github/actions/go/build@feature/go-release
        with:
          app-name: ${{ inputs.app-name }}
          go-version: ${{ inputs.go-version }}
          main-package-path: ${{ inputs.main-package-path }}

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Set up Go
        uses: osru-leu/platform-github-actions/.github/actions/go/setup@feature/go-release
        with:
          go-version: ${{ inputs.go-version }}
      # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
      - uses: osru-leu/platform-github-actions/.github/actions/common/static-code-analysis/codeql@feature/go-release
        with:
          languages: go

  set-image-tag:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    steps:
      - name: Generate image tag
        id: set-tag
        uses: osru-leu/platform-github-actions/.github/actions/go/image-tag@feature/go-release

  package:
    runs-on: ubuntu-latest
    needs: build
    # outputs:
    #   full-image-name: ${{ steps.package.outputs.full-image-name }}
    steps:
      - name: Package application
        id: package
        uses: osru-leu/platform-github-actions/.github/actions/go/package@feature/go-release
        with:
          app-name: ${{ inputs.app-name }}
          context: ${{ inputs.docker-context }}
          docker-file: ${{ inputs.docker-file }}
          image-tag: ${{ needs.set-image-tag.outputs.image-tag }}
          registry: ${{ inputs.registry }}
          push: ${{ inputs.docker-push }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
  security:
    runs-on: ubuntu-latest
    needs: [package, set-image-tag]
    steps:
      - name: Wait for image availability ###Remove this later
        run: |
          echo "üîç Verifying image availability in registry..."
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${REPO_LOWER}:${{ needs.set-image-tag.outputs.image-tag }}"
          
          # Login to verify access
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Wait up to 2 minutes for image to be available
          for i in {1..24}; do
            echo "Attempt $i/24: Checking if image exists..."
            if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
              echo "‚úÖ Image is available: $IMAGE"
              break
            else
              echo "‚è≥ Image not yet available, waiting 5 seconds..."
              sleep 5
            fi
            
            if [ $i -eq 24 ]; then
              echo "‚ùå Image still not available after 2 minutes"
              echo "This might indicate an issue with the package job"
              exit 1
            fi
          done

      - name: Run Trivy scan
        uses: osru-leu/platform-github-actions/.github/actions/common/security-scanner/trivy-scan@feature/go-release
        with:
          version: ${{ needs.set-image-tag.outputs.image-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
