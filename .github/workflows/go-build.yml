name: Go Dev Build Pipeline

on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      binary-name:
        required: false
        type: string
        default: 'app'
        description: 'Name of the binary executable'
      go-version:
        required: false
        type: string
        default: '1.24'
      registry-url:
        required: false
        type: string
        description: 'Container registry URL (e.g., ghcr.io, AWS ECR)'
        default: 'ghcr.io'
      push-to-registry:
        required: false
        type: boolean
        default: true
        description: 'Push to registry instead of saving as tar'

    outputs:
      image-tag:
        description: 'Generated image tag'
        value: ${{ jobs.setup.outputs.image-tag }}
      full-image-name:
        description: 'Full image name with registry'
        value: ${{ jobs.push-to-registry.outputs.full-image-name }}

permissions:
  actions: read
  contents: read
  security-events: write
  checks: write          # for test summary
  pull-requests: write
  issues: write
  packages: write        # for GHCR

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.setup-tag.outputs.image-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup image tag
        id: setup-tag
        uses: osru-leu/platform-github-actions/.github/actions/common/git-tag-generation@feature/workflows

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint Go code
        uses: osru-leu/platform-github-actions/.github/actions/go/lint@feature/workflows
        with:
          go-version: ${{ inputs.go-version }}
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run unit tests
        uses: osru-leu/platform-github-actions/.github/actions/go/unit-test@feature/workflows
        with:
          go-version: ${{ inputs.go-version }}
      
      - name: Generate Test Summary
        if: always()
        run: |
          echo "## Test Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "📊 Coverage report generated" >> $GITHUB_STEP_SUMMARY
          echo "📦 Test artifacts uploaded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Building application binary" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Packaging into Docker container" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Running security scans" >> $GITHUB_STEP_SUMMARY
          
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Go application
        uses: osru-leu/platform-github-actions/.github/actions/go/build@feature/workflows
        with:
          app-name: ${{ inputs.app-name }}
          go-version: ${{ inputs.go-version }}
          binary-name: ${{ inputs.binary-name }}

  package:
    runs-on: ubuntu-latest
    needs: [build, setup]
    outputs:
      full-image-name: ${{ steps.package.outputs.full-image-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Package application (build only, no push)
        id: package
        uses: osru-leu/platform-github-actions/.github/actions/common/docker-build-push@feature/workflows
        with:
          app-name: ${{ inputs.app-name }}
          image-tag: ${{ needs.setup.outputs.image-tag }}
          binary-artifact-name: ${{ inputs.app-name }}-binary
          binary-name: ${{ inputs.binary-name }}
          registry-url: ${{ inputs.registry-url }}
          push-to-registry: false  # Build but don't push yet

  security:
    runs-on: ubuntu-latest
    needs: [package, setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security scan
        uses: osru-leu/platform-github-actions/.github/actions/common/security-scan@feature/workflows
        with:
          app-name: ${{ inputs.app-name }}
          image-tag: ${{ needs.setup.outputs.image-tag }}
          languages: 'go'
          go-version: ${{ inputs.go-version }}
          full-image-name: ${{ needs.package.outputs.full-image-name }}
          use-registry-image: false  # Scan local image, not registry

  push-to-registry:
    runs-on: ubuntu-latest
    needs: [security, setup, package]
    if: inputs.push-to-registry
    outputs:
      full-image-name: ${{ steps.push.outputs.full-image-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.app-name }}-image
          path: /tmp/

      - name: Login to GitHub Container Registry
        if: inputs.registry-url == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Load and push image
        id: push
        shell: bash
        run: |
          # Load the image from tar
          docker load -i /tmp/${{ inputs.app-name }}.tar
          
          # Generate full image name
          if [[ "${{ inputs.registry-url }}" == "ghcr.io" ]]; then
            REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
            FULL_NAME="ghcr.io/${REPO_OWNER}/${REPO_NAME}/${{ inputs.app-name }}:${{ needs.setup.outputs.image-tag }}"
          else
            FULL_NAME="${{ inputs.registry-url }}/${{ inputs.app-name }}:${{ needs.setup.outputs.image-tag }}"
          fi
          
          # Tag and push
          docker tag ${{ inputs.app-name }}:${{ needs.setup.outputs.image-tag }} ${FULL_NAME}
          docker push ${FULL_NAME}
          
          echo "full-image-name=${FULL_NAME}" >> $GITHUB_OUTPUT
          echo "✅ Pushed secure image: ${FULL_NAME}"


  # TODO: Add dashboard capability when available
  # dashboard:
  #   runs-on: ubuntu-latest
  #   needs: [lint, test, build, security, package, push-to-registry, setup]
  #   if: always()
  #   steps:
  #     - name: Generate build summary
  #       run: echo "Dashboard functionality to be implemented"
