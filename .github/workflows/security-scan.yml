name: "CodeQL"

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      languages:
        required: true
        type: string

jobs:
  analyze:
    name: Analyze with CodeQL
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.lang-matrix.outputs.matrix }}

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: Set up language matrix
        id: lang-matrix
        run: |
          LANGS="${{ inputs.languages }}"
          # Handle single language or comma-separated languages
          if [[ "$LANGS" == *","* ]]; then
            # Multiple languages
            echo "matrix=$(echo $LANGS | tr ',' '\n' | jq -R -s -c 'split(\"\n\") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          else
            # Single language
            echo "matrix=[\"$LANGS\"]" >> $GITHUB_OUTPUT
          fi

      - name: Debug matrix
        run: echo "${{ steps.lang-matrix.outputs.matrix }}"

  scan:
    needs: analyze
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ${{ fromJson(needs.analyze.outputs.matrix)  }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with: 
          languages: ${{ matrix.language }}

      - name: Build
        run: |
          if [[ "${{ matrix.language }}" == "go" ]]; then
            go build ./...
          elif [[ "${{ matrix.language }}" == "python" ]]; then
            echo "No build needed for Python"
          elif [[ "${{ matrix.language }}" == "csharp" ]]; then
            dotnet build
          elif [[ "${{ matrix.language }}" ==  "javascript" ]]; then
            npm ci
            npm run build || true
          else
            echo "Unsupported language: ${{ matrix.language }}"
            exit 1
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
        with:
          output: codeql-results
          upload: false

      # For public repos or organization repos - uncomment below  
      # - name: Upload CodeQL results to GitHub Security
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: codeql-results

      # For private repos - use artifact upload instead
      - name: Upload CodeQL results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-scan-results-${{ matrix.language }}
          path: codeql-results

  container-scan:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Debug inputs
        run: |
          echo "image-name: ${{ inputs.image-name }}"
          echo "image-tag: ${{ inputs.image-tag }}"
          echo "languages: ${{ inputs.languages }}"

      - name: Download container image
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image-name }}-image
          path: /tmp/

      - name: Load container image
        run: docker load -i /tmp/${{ inputs.image-name }}.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.image-name }}:${{ inputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # For public repos or organization repos - uncomment below
      # - name: Upload Trivy scan results to GitHub Security
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      # For private repos - use artifact upload instead
      - name: Upload security scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: trivy-results.sarif

      - name: Generate security report
        run: |
          echo "Container security scan completed for ${{ inputs.image-name }}:${{ inputs.image-tag }}"
          echo "Results saved as workflow artifact: security-scan-results"