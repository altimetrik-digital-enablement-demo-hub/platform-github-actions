name: Complete Java Pipeline

on:
  workflow_call:
    inputs:
      java-version:
        description: "Java version to use"
        required: false
        default: '17'
        type: string

      working-directory:
        description: "Project root directory"
        required: false
        default: '.'
        type: string
      
      lint-command:
        description: 'Lint command (e.g., mvn checkstyle:check)'
        required: false
        default: 'mvn spring-javaformat:validate'
        type: string

      build-command:
        description: 'build command (e.g., mvn clean package)'
        required: false
        default: 'mvn clean package'
        type: string

      test-command:
        description: 'test command (e.g., mvn test)'
        required: false
        default: 'mvn test'
        type: string
        
      package-command:
        description: "Command to package the app"
        required: false
        default: 'mvn package'
        type: string

      artifact-name:
        description: "Name of the build artifact"
        required: false
        default: 'java-package'
        type: string
      
      run-trivy:
        description: 'Run Trivy Scan'
        required: false
        default: true
        type: boolean

      run-grype:
        description: 'Run Grype Scan'
        required: false
        default: true
        type: boolean

      contine-on-error:
        description: "Continue on error for linting"
        required: false
        default: true
        type: boolean

permissions:
  actions: read
  contents: write
  security-events: write
  packages: write

jobs:
  # This job runs the linting process to ensure code quality
  lint:
    runs-on: ubuntu-latest
    steps:
      # This step sets up the Java environment
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/setup@v0
        with:
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}

      # This job sets up Java and runs the lint command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/lint@v0
        with:
          lint-command: ${{ inputs.lint-command }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          continue-on-error: ${{ inputs.contine-on-error }}

  # This job builds the Java project, preparing it for packaging
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # This step sets up the Java environment
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/setup@v0
        with:
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}

      # This job sets up Java and runs the build command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/build@v0
        with:
          build-command: ${{ inputs.build-command }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          artifact-name: ${{ inputs.artifact-name }}

  # This job executes unit test
  unit-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # This step sets up the Java environment
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/setup@v0
        with:
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          
      # This step runs the unit tests using the new Java test action
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/test@v0
        with:
          test-command: ${{ inputs.test-command }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          continue-on-error: ${{ inputs.contine-on-error }}

  # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
  # Note: CodeQL is only available for public repos or private repos with GitHub Advanced Security
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.repository_visibility == 'public' }}
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
      - name: Run CodeQL Analysis
        uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/codeql@v0
        with:
          languages: java
          working-directory: ${{ inputs.working-directory }}
        continue-on-error: true

  # This job handles versioning by generating a new tag based on the commit history
  versioning:
    runs-on: ubuntu-latest
    needs: [build, unit-test]
    permissions:
      contents: write
    outputs:
      new-tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      # This step checks out the code from the repository
      - id: generate-tag
        uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/github-actions/git-tag-generation@v0

  # This job publishes the Docker image to GitHub Container Registry (GHCR) if a new tag is generated
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: versioning
    if: ${{ needs.versioning.outputs.new-tag != '' }}
    permissions:
      contents: read
      packages: write  # Required to push to GHCR
    steps:
    # This job builds and publishes a Docker image to GitHub Container Registry (GHCR)
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/docker-build-push@v0
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-scan:
    runs-on: ubuntu-latest
    needs: [versioning, dockerBuildAndPush]
    if: ${{ needs.versioning.outputs.new-tag != '' }}
    permissions:
      contents: read
      packages: read  # Required to pull from GHCR
    steps:
      # This job scans the Docker image for vulnerabilities using Trivy
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/trivy-scan@v0
        if: ${{ inputs.run-trivy == true }}
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          severity: 'CRITICAL,HIGH'

      # This job scans the Docker image for vulnerabilities using Grype
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/grype-scan@v0
        if: ${{ inputs.run-grype == true }}
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # This job generates a dashboard summarizing the results of the previous jobs
  dashboard:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, docker-scan]
    if: always()
    steps:
      # This job generates a dashboard summarizing the results of the previous jobs
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/github-dashboard@v0 
