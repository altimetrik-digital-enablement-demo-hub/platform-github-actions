<<<<<<<< HEAD:.github/workflows/python-build.yml
name: Complete python Pipeline
========
name: Complete Java Pipeline
>>>>>>>> main:.github/workflows/java-build.yml

on:
  workflow_call:
    inputs:
<<<<<<<< HEAD:.github/workflows/python-build.yml
      python-version:
        description: "Python version to use"
        required: false
        default: '3.9'
========
      java-version:
        description: "Java version to use"
        required: false
        default: '17'
>>>>>>>> main:.github/workflows/java-build.yml
        type: string

      working-directory:
        description: "Project root directory"
        required: false
        default: '.'
        type: string
      
      registry:
        description: 'Docker registry to push the image (e.g., ghcr.io/org/app)'
        required: false
        default: 'ghcr.io'
        type: string
      
      lint-command:
        description: 'Lint command (e.g., mvn checkstyle:check)'
        required: false
<<<<<<<< HEAD:.github/workflows/python-build.yml
        default: 'pylint app run.py tests'
========
        default: 'mvn checkstyle:check'
        type: string

      build-command:
        description: 'build command (e.g., mvn clean package)'
        required: false
        default: 'mvn clean package'
>>>>>>>> main:.github/workflows/java-build.yml
        type: string

      test-command:
        description: 'test command (e.g., mvn test)'
        required: false
<<<<<<<< HEAD:.github/workflows/python-build.yml
        default: 'python -m unittest discover tests'
========
        default: 'mvn test'
>>>>>>>> main:.github/workflows/java-build.yml
        type: string
        
      package-command:
        description: "Command to package the app"
        required: false
<<<<<<<< HEAD:.github/workflows/python-build.yml
        default: 'python -m build'
        type: string

      package-output:
        description: "Directory or file path to upload as package artifact"
        required: false
        default: 'dist/'
========
        default: 'mvn package'
>>>>>>>> main:.github/workflows/java-build.yml
        type: string

      artifact-name:
        description: "Name of the uploaded artifact"
        required: false
<<<<<<<< HEAD:.github/workflows/python-build.yml
        default: 'python-package'
========
        default: 'java-package'
>>>>>>>> main:.github/workflows/java-build.yml
        type: string
      
      run-trivy:
        description: 'Run Trivy Scan'
        required: false
        default: true
        type: boolean

<<<<<<<< HEAD:.github/workflows/python-build.yml
      run_grype:
========
      run-grype:
>>>>>>>> main:.github/workflows/java-build.yml
        description: 'Run Grype Scan'
        required: false
        default: true
        type: boolean

      contine-on-error:
        description: "Continue on error for linting"
        required: false
        default: true
        type: boolean

jobs:
  # This job runs the linting process to ensure code quality
  lint:
    runs-on: ubuntu-latest
    steps:
<<<<<<<< HEAD:.github/workflows/python-build.yml
    # This job sets up Node.js and runs the lint command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/python/setup@main
        with:
          python-version: ${{ inputs.python-version }}
          working-directory: ${{ inputs.working-directory }}

      # This job sets up Node.js and runs the lint command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/python/lint@main
        with:
          lint-command: ${{ inputs.lint-command }}
          continue-on-error: ${{ inputs.contine-on-error }}

========
      # This job sets up Java and runs the lint command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/lint@main
        with:
          lint-command: ${{ inputs.lint-command }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          continue-on-error: ${{ inputs.contine-on-error }}

  # This job builds the Java project, preparing it for packaging
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # This job sets up Java and runs the build command
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/build@main
        with:
          build-command: ${{ inputs.build-command }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
          token: ${{ secrets.GITHUB_TOKEN }}

>>>>>>>> main:.github/workflows/java-build.yml
  # This job executes unit test
  unit-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
<<<<<<<< HEAD:.github/workflows/python-build.yml
      # This job sets up Python and runs unit tests
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/python/setup@main
        with:
          python-version: ${{ inputs.python-version }}
          working-directory: ${{ inputs.working-directory }}
      # This step runs the unit tests using Jest
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/python/unittest@main
        with:
          test-command: ${{ inputs.test-command }}
          continue-on-error: ${{ inputs.continue-on-error }}
  
  # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
  security-scan:
    needs: lint
    runs-on: ubuntu-latest
========
      # This job sets up Java and runs unit tests
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/setup@main
        with:
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}
      # This step runs the unit tests
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/junit-test@main
        with:
          test-command: ${{ inputs.test-command }}
          continue-on-error: ${{ inputs.contine-on-error }}

  # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
  # Note: CodeQL is only available for public repos or private repos with GitHub Advanced Security
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.repository_visibility == 'public' }}
>>>>>>>> main:.github/workflows/java-build.yml
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
<<<<<<<< HEAD:.github/workflows/python-build.yml
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/static-code-analysis/codeql@main
        with:
          languages: python

  # This job builds the Python project, preparing it for packaging
  versioning:
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
========
      - name: Run CodeQL Analysis
        uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/codeql@main
        with:
          languages: java
        continue-on-error: true

  # This job handles versioning by generating a new tag based on the commit history
  versioning:
    runs-on: ubuntu-latest
    needs: [build, unit-test]
>>>>>>>> main:.github/workflows/java-build.yml
    permissions:
      contents: write
    outputs:
      new-tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      # This step checks out the code from the repository
      - id: generate-tag
        uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/github-actions/git-tag-generation@main
<<<<<<<< HEAD:.github/workflows/python-build.yml

========
>>>>>>>> main:.github/workflows/java-build.yml

  # This job publishes the Docker image to GitHub Container Registry (GHCR) if a new tag is generated
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: versioning
    if: ${{ needs.versioning.outputs.new-tag != '' }}
    permissions:
      contents: read
      packages: write  # Required to push to GHCR
    steps:
    # This job builds and publishes a Docker image to GitHub Container Registry (GHCR)
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/docker-build-push@main
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry }}
  
  # This job scans the Docker image for vulnerabilities using Trivy and Grype
  docker-scan:
    runs-on: ubuntu-latest
<<<<<<<< HEAD:.github/workflows/python-build.yml
    needs: [versioning, docker-build-and-push]
    if: ${{ needs.versioning.outputs.new_tag != '' }}
========
    needs: [versioning, dockerBuildAndPush]
    if: ${{ needs.versioning.outputs.new-tag != '' }}
>>>>>>>> main:.github/workflows/java-build.yml
    permissions:
      contents: read
      packages: read  # Required to pull from GHCR
    steps:
      # This job scans the Docker image for vulnerabilities using Trivy
<<<<<<<< HEAD:.github/workflows/python-build.yml
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/security-scanner/trivy-scan@main
        if: ${{ inputs.run_trivy == true }}
========
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/trivy-scan@main
        if: ${{ inputs.run-trivy == true }}
>>>>>>>> main:.github/workflows/java-build.yml
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          severity: 'CRITICAL,HIGH'
  
      # This job scans the Docker image for vulnerabilities using Grype
<<<<<<<< HEAD:.github/workflows/python-build.yml
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/security-scanner/grype-scan@main
        if: ${{ inputs.run_grype == true }}
        with:
          version: ${{ needs.versioning.outputs.new_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
========
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/grype-scan@main
        if: ${{ inputs.run-grype == true }}
        with:
          version: ${{ needs.versioning.outputs.new-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # This job packages the Java project, creating an artifact for deployment or distribution
  package:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      # This step packages the Java project
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/java/package@main
        with:
          package-command: ${{ inputs.package-command }}
          artifact-name: ${{ inputs.artifact-name }}
          java-version: ${{ inputs.java-version }}
          working-directory: ${{ inputs.working-directory }}

  # This job generates a dashboard summarizing the results of the previous jobs
  dashboard:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, dockerScan]
    if: always()
    steps:
      # This job generates a dashboard summarizing the results of the previous jobs
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/github-dashboard@main 
>>>>>>>> main:.github/workflows/java-build.yml
