name: build .Net application
on:
  workflow_call:
    inputs:
      app-name:
        description: 'Name of the .NET '
        required: true
        type: string
      dotnet-version:
        description: 'Version of .NET SDK to use. Default 9.0.300; can be any valid .NET SDK version.'
        required: false
        type: string
        default: '9.0.300'
      dotnet-linter-csharpier:
        description: 'Run CSharpier linter on the code. Default true; can be false to skip CSharpier linting.'
        required: false
        type: boolean  
        default: true
      dotnet-test-verbosity:
        description: 'Verbosity level for .NET tests. Default normal; can be quiet, minimal, normal, detailed, or diagnostic.'
        required: false
        type: string
        default: 'normal'
      working-directory:
        description: 'Working directory for the .NET application. Default "."; can be set to a custom path.'
        required: false
        type: string
        default: '.'
      registry:
        description: 'Container registry to push the image to. Default ghcr.io.'
        required: false
        type: string
        default: 'ghcr.io'
      docker-context:
        description: 'Context for Docker build. Default "."'
        required: false
        type: string
        default: '.'
      docker-file:
        description: 'Dockerfile path. Default ./Dockerfile; can be set to a custom Dockerfile path'
        required: false
        type: string
        default: './Dockerfile'
      docker-push:
        description: 'Push the Docker image to the registry. Default true'
        required: false
        type: boolean
        default: true
      run-trivy:
        description: 'Run Trivy Scan'
        required: false
        default: true
        type: boolean
      run-grype:
        description: 'Run Grype Scan'
        required: false
        default: true
        type: boolean

permissions:
  actions: read
  contents: write
  security-events: write
  packages: write
  issues: read
  checks: write
  pull-requests: write
      
jobs:
  lint:
    runs-on: 'ubuntu-latest'
    steps:
      - name: csharpier
        if: ${{ inputs.dotnet-linter-csharpier == true }}
        uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/dotnet/lint/csharpier@test-cs
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          git-fetch-depth: 1
          git-fetch-tags: false

  unit-test:
    needs: lint
    runs-on: 'ubuntu-latest'     
    steps:
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/dotnet/setup@test-cs
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          git-fetch-depth: 1
          git-fetch-tags: false 
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/dotnet/test@test-cs
        with:
          verbosity: ${{ inputs.dotnet-test-verbosity }}

  security-scan:
    needs: lint
    runs-on: 'ubuntu-latest'
    continue-on-error: true
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      # This step sets up the .NET environment for CodeQL analysis
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/dotnet/setup@test-cs
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          git-fetch-depth: 1
          git-fetch-tags: false 
      
      # This job runs CodeQL analysis to identify security vulnerabilities and code quality issues
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/static-code-analysis/codeql@test-cs
        with:
          languages: 'csharp'
          working-directory: ${{ inputs.working-directory }}

  version:
    runs-on: 'ubuntu-latest'
    needs: [lint, unit-test]
    permissions:
      contents: write
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.image-tag }}
    steps:
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/dotnet/image-tag@test-cs
        id: generate-tag

  docker-build-and-push:
    runs-on: 'ubuntu-latest'
    needs: version
    if: needs.version.outputs.image-tag != ''
    permissions:
      contents: read
      packages: write  # Required to push to GHCR
    steps:
      # This step builds the .NET application
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/docker-build-push@test-cs
        id: build
        with:
          version: ${{ needs.version.outputs.image-tag }}
          context: ${{ inputs.docker-context }}
          docker-file: ${{ inputs.docker-file }}
          push: ${{ inputs.docker-push }}
          token: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry }}

  docker-scan:
    runs-on: ubuntu-latest
    needs: [version, docker-build-and-push]
    if: needs.version.outputs.image-tag != '' 
    permissions:
      contents: read
      packages: read  
    steps:
        # This job scans the Docker image for vulnerabilities using Trivy
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/security-scanner/trivy-scan@test-cs
        if: ${{ inputs.run-trivy == true }}
        with:
          version: ${{ needs.version.outputs.image-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          severity: 'CRITICAL,HIGH'
  
      # This job scans the Docker image for vulnerabilities using Grype
      - uses: altimetrik-digital-enablement-demo-hub/platform-github-actions/.github/actions/common/security-scanner/grype-scan@test-cs
        if: ${{ inputs.run-grype == true }}
        with:
          version: ${{ needs.version.outputs.image-tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
