name: Auto Version Tag

on:
  workflow_call:
    outputs:
      new_tag:
        description: "The newly created version tag"
        value: ${{ jobs.tag.outputs.new_tag }}

jobs:
  tag:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      new_tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine tag from commits
        id: set-tag
        run: |
          DEFAULT_VERSION="v0.1.0"
          git fetch --tags

          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            VERSION="0.1.0"
            RANGE=""
          else
            VERSION="${LATEST_TAG#v}"
            RANGE="$LATEST_TAG..HEAD"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          COMMITS=$(git log $RANGE --pretty=format:"%s")

          echo "Commit messages in range $RANGE:"
          echo "$COMMITS"

          BUMP=""
          while IFS= read -r COMMIT; do
            LOWER=$(echo "$COMMIT" | tr '[:upper:]' '[:lower:]')
            if [[ "$LOWER" =~ fix(\s|\(|:).*major ]]; then
              BUMP="major"
              break
            elif [[ "$LOWER" =~ fix(\s|\(|:).*minor || "$LOWER" =~ feat ]]; then
              [[ "$BUMP" != "major" ]] && BUMP="minor"
            elif [[ "$LOWER" =~ fix ]]; then
              [[ "$BUMP" != "major" && "$BUMP" != "minor" ]] && BUMP="patch"
            fi
          done <<< "$COMMITS"

          if [ -z "$BUMP" ]; then
            echo "No matching commits found for semantic versioning. Skipping tag."
            echo "tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          case $BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "âœ… Pushed new tag: $NEW_TAG"

          echo "tag=$NEW_TAG" >> "$GITHUB_OUTPUT"