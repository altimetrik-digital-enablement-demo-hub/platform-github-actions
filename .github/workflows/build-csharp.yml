name: build
on:
  workflow_dispatch:
    inputs:
      language:
        description: 'Programming language of the application'
        required: true
        default: 'csharp'
        type: string
      app-name:
        description: 'Name of the application to package'
        default: 'netwebapi'
        required: true
        type: string
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      app-name:
        required: true
        type: string
  # push:  
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #   - '**.cs'
  #   - '**.csproj'

env:
  AZURE_WEBAPP_NAME: netwebapi    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '9.0.300' # The .NET SDK version to use  

jobs:
  build-csharp:
    if: ${{ inputs.language == 'csharp' }}
    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
    
    - name: dotnet build ${{ inputs.app-name }}
      run: |
        dotnet build --configuration Release --no-restore

    - name: Install Versionize
      run: dotnet tool install --global Versionize
    - name: Setup git
      run: |
        git config --local user.email "gituser@github.com"
        git config --local user.name "Git User"
        
        echo "debugging version info"
        git log --oneline | head -n 5
        cat /home/runner/work/NetWebApi/NetWebApi/src/NetWebApi.API/NetWebApi.API.csproj

    - name: Versionize Release
      id: versionize
      run: versionize --exit-insignificant-commits
      continue-on-error: true
    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."
    # - name: Push changes to GitHub
    #   if: steps.versionize.outcome == 'success'
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}
    #     tags: true

    # - name: 'Create release'
    #   if: steps.versionize.outcome == 'success'
    #   uses: 'actions/github-script@v5'
    #   with:
    #     github-token: '${{ secrets.GITHUB_TOKEN }}'
    #     script: |
    #       try {
    #         const tags_url = context.payload.repository.tags_url + "?per_page=1"
    #         const result = await github.request(tags_url)
    #         const current_tag = result.data[0].name
    #         await github.rest.repos.createRelease({
    #           draft: false,
    #           generate_release_notes: true,
    #           name: current_tag,
    #           owner: context.repo.owner,
    #           prerelease: false,
    #           repo: context.repo.repo,
    #           tag_name: current_tag,
    #         });
    #       } catch (error) {
    #         core.setFailed(error.message);
    #       }

    # - name: dotnet publish
    #   run: |
    #     dotnet publish -c \
    #       Release -o ${{env.AZURE_WEBAPP_PACKAGE_PATH}}/${{ env.AZURE_WEBAPP_NAME }}

    # - name: Upload artifact for deployment job
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ env.AZURE_WEBAPP_NAME }}
    #     path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}/${{ env.AZURE_WEBAPP_NAME }}
    
    