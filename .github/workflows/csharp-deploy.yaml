name: build
on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      language:
        required: false
        type: string
        default: 'csharp'
      git-fetch-depth:
        required: false
        type: string
        default: '1'
      dotnet-version:
        required: false
        type: string
        default: '9.0.300'
      dotnet-tools-restore:
        required: false
        type: boolean
        default: true
      dotnet-linter-csharpier:
        required: false
        type: boolean  
        default: true
      dotnet-linter-roslynator:
        required: false
        type: boolean  
        default: false
      security-trivy:
        required: false
        type: boolean
        default: true
      security-snyk:
        required: false
        type: boolean
        default: false
      registry:
        required: false
        type: string
        default: 'ghcr.io'
      chart:
        required: false
        type: string
        default: 'app'
      helm-version:
        required: false
        type: string
        default: 'helm3'
      target:
        required: false
        description: 'Deployment target platform. Default local-k8s; can be local-k8s, azure-webapp-svc, or azure-webapp-containter.'
        type: string
        default: 'local-k8s'
      
jobs:
  lint:
    name: Lint C# code
    if: ${{ inputs.language == 'csharp' }}     
    runs-on: 'ubuntu-latest'
    steps:
      - name: csharpier
        if: ${{ inputs.dotnet-linter-csharpier == true }}
        uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/lint/csharpier@main
        continue-on-error: true
        with:
          app-name: ${{ inputs.app-name }}
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: roslynator
        if: ${{ inputs.dotnet-linter-roslynator == true }}
        uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/lint/roslynator@main
        continue-on-error: true
        with:
          app-name: ${{ inputs.app-name }}
          dotnet-version: ${{ inputs.dotnet-version }}
          restore: ${{ inputs.dotnet-tools-restore }}

  test:
    name: Test ${{ inputs.app-name }}
    needs: lint
    runs-on: 'ubuntu-latest'     
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/test@main
        with:
          verbosity: 'normal'

  codeql:
    name: CodeQL Analysis for ${{ inputs.app-name }}
    needs: lint
    runs-on: 'ubuntu-latest'
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/codeql@main
        with:
          app-name: ${{ inputs.app-name }}  
  build:
    name: Build ${{ inputs.app-name }}
    needs: [test, codeql]
    runs-on: 'ubuntu-latest'
    outputs:
      app_version: ${{ steps.build.outputs.app_version }}
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/build@main
        id: build
        with:
          app-name: ${{ inputs.app-name }}
          language: ${{ inputs.language }}
          dotnet-version: ${{ inputs.dotnet-version }}
          git-fetch-depth: ${{ inputs.git-fetch-depth }}   
          token: ${{ secrets.GITHUB_TOKEN }}  
  
  package:
    name: Package ${{ inputs.app-name }}
    needs: build
    if: |
      needs.build.outputs.app_version != '' && 
      ( 
        inputs.target == 'local-k8s' || 
        inputs.target == 'azure-webapp-container'
      )
    runs-on: 'ubuntu-latest'
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/package@main
        with:
          language: ${{ inputs.language }}
          app-name: ${{ inputs.app-name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          context: src/NetWebApi.API
          docker-file: src/NetWebApi.API/Dockerfile
          image-tag: ${{ needs.build.outputs.app_version }}
          push: true
  
  security:
    name: Security Scan for ${{ inputs.app-name }}
    needs: [build, package]
    if: | 
      inputs.target == 'local-k8s' || 
      inputs.target == 'azure-webapp-container'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/security-scan/trivy@main
        if: inputs.security-trivy == true
        continue-on-error: true
        with:
          registry: ghcr.io
          image-name: dgeorgievski/${{ inputs.app-name }}
          image-tag: ${{ needs.build.outputs.app_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          severity: 'CRITICAL,HIGH'

      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/security-scan/snyk@main
        if: inputs.security-snyk == true
        continue-on-error: true
        with:
          registry: ghcr.io
          image-name: ${{ inputs.app-name }}
          image-tag: ${{ needs.build.outputs.app_version }}
          dockerFile: src/NetWebApi.API/Dockerfile
          token: ${{ secrets.GITHUB_TOKEN }}
          
  deploy:
    name: Deploy ${{ inputs.app-name }}
    needs: [build, security]
    runs-on: ['self-hosted', 'macOS']
    steps:
      - uses: dgeorgievski/platform-github-actions/.github/actions/dotnet/deploy/local-k8s-helm@main
        if: inputs.target == 'local-k8s'
        with:
          app-name: ${{ inputs.app-name }}
          namespace: ${{ inputs.app-name }}
          registry: ${{ inputs.registry }}
          image-name: 'dgeorgievski/${{ inputs.app-name }}'
          image-tag: ${{ needs.build.outputs.app_version }}
          chart: ${{ inputs.chart }}
          helm-version: ${{ inputs.helm-version }}
